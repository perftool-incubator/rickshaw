#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
#set -u

# Shared init and functions for endpoints

echo "#params: $@"
host="" # the host the endpoint works with
controller_ipaddr=""
rb_exit_success=0
rb_exit_timeout=3
rb_exit_abort=4
rb_exit_input=2
max_rb_attempts=""
cs_rb_opts=""
do_validate="0"
num_clients=0
num_servers=0
disable_tools=0
abort=0
max_sample_failures=""
export ssh_opts="-q -o StrictHostKeyChecking=no -o PasswordAuthentication=no"
declare -A clients
declare -A servers

function abort_error() {
    local msg="$1"; shift
    local sync="$1"; shift
    echo "[ERROR] ${msg}" 1>&2
    local msg_file=error.json
    echo '[{"recipient":{"type":"all","id":"all"},"user-object":{"error":"'$msg'"}}]' >$msg_file
    do_roadblock "$sync" "follower" "abort" "$msg_file"
    abort=1
}

function exit_error() {
    local msg
    msg="$1"
    echo "[ERROR] ${msg}" 1>&2
    exit 1
}

function process_opts() {
    local longopts="validate,endpoint-opts:,endpoint-label:,run-id:,base-run-dir:,image:"
    local longopts+=",roadblock-server:,roadblock-passwd:,roadblock-id:,osruntime:,max-sample-failures:"
    local longopts+=",max-rb-attempts:,endpoint-deploy-timeout:,client-server-script-start-timeout:"
    local opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
    if [ $? -ne 0 ]; then
        exit_error "Unrecognized option specified" endpoint-deploy  
    fi
    eval set -- "$opts";
    while true; do
        case "$1" in
            --validate)
                do_validate="1"
                shift;
                ;;
            --endpoint-opts)
                shift;
                endpoint_opts="$1"
                shift;
                ;;
            --endpoint-label)
                shift;
                endpoint_label="$1"
                shift;
                ;;
            --run-id)
                shift;
                run_id="$1"
                shift;
                ;;
            --base-run-dir)
                shift;
                base_run_dir="$1"
                shift;
                ;;
            --image)
                shift;
                image="$1"
                shift;
                ;;
            --roadblock-passwd)
                shift;
                rb_passwd="$1"
                cs_rb_opts="$cs_rb_opts --roadblock-passwd=$rb_passwd"
                shift;
                ;;
            --roadblock-id)
                shift;
                rb_id="$1"
                cs_rb_opts="$cs_rb_opts --roadblock-id=$rb_id"
                shift;
                ;;
            --max-sample-failures)
                shift;
                max_sample_failures="$1"
                shift;
                ;;
            --max-rb-attempts)
                shift;
                max_rb_attempts="$1"
                shift;
                ;;
            --endpoint-deploy-timeout)
                shift;
                endpoint_deploy_timeout="$1"
                echo "setting endpoint_deploy_timeout to $endpoint_deploy_timeout"
                shift;
                ;;
            --client-server-script-start-timeout)
                shift;
                client_server_script_start_timeout="$1"
                echo "setting client_server_script_start_timeout to $client_server_script_start_timeout"
                shift;
                ;;
            --)
                shift;
                break;
            ;;
            *)
            exit_error "Unexpected argument [$1]" endpoint-deploy
            shift;
            break;
            ;;
        esac
    done
}
if [ -z "$max_sample_failures" ]; then
    max_sample_failures=3
    if [ "do_validate" == "0" ]; then
        echo "[WARNING] --max-sample-failures was not used, so setting to default of $max_sample_failures"
    fi
fi
if [ -z "$max_rb_attempts" ]; then
    max_rb_attempts=1
    if [ "do_validate" == "0" ]; then
        echo "[WARNING] --max-rb-attempts was not used, so setting to default of $max_rb_attempts"
    fi
fi

function addto_clients_servers() {
    local arg="$1"; shift
    local val="$1"; shift
    for ids in `echo $val | sed -e 's/+/ /g'`; do
        if echo $ids | grep -q -- "-"; then
            range=`echo $ids | sed 's/-/ /'`
            for j in `seq $range`; do
                if [ "$arg" == "clients" -o "$arg" == "client" ]; then
                    clients[$j]="client-$j"
                    let num_clients=$num_clients+1
                elif [ "$arg" == "servers" -o "$arg" == "server" ]; then
                    servers[$j]="server-$j"
                    let num_servers=$num_servers+1
                fi
            done
        else
            if [ "$arg" == "clients" -o "$arg" == "client" ]; then
                clients[$ids]="client-$ids"
                let num_clients=$num_clients+1
            elif [ "$arg" == "servers" -o "$arg" == "server" ]; then
                servers[$ids]="server-$ids"
                let num_servers=$num_servers+1
            fi
        fi
    done
}

function echo_clients_servers() {
    if [ $num_clients -gt 0 ]; then
        echo "client ${!clients[@]}"
    fi
    if [ $num_servers -gt 0 ]; then
        echo "server ${!servers[@]}"
    fi
}

function init_common_dirs() {
    if [ "$do_validate" != 1 ]; then
        config_dir="$base_run_dir/config"
        client_server_config_dir="$config_dir/client-server"
        client_server_bench_cmds_dir="$client_server_config_dir/bench-cmds"
        run_dir="$base_run_dir/run"
        client_server_logs_dir="$run_dir/client-server/logs"
        endpoint_run_dir="$run_dir/endpoint/$endpoint_label"
        bootstrap_script="/usr/local/bin/bootstrap"
        client_server_run_script="/usr/local/bin/client-server-script"
        roadblock_msgs_dir="$endpoint_run_dir/roadblock-msgs"
        mkdir -p "$endpoint_run_dir"
        mkdir -p "$client_server_logs_dir"
        mkdir -p "$roadblock_msgs_dir"
    fi
}

function base_req_check() {
    if [ -z "$rb_passwd" -o -z "$rb_id" ]; then
        echo "Not using roadblock to synchronize since some or all options were missing"
        use_rb=0
        cs_rb_opts=""
        rb_do_exit=0
        if [ ${#clients[@]} -gt 1 ]; then
            echo "Refusing to run because roadblock is not being used and number of clients is > 1"
            rb_do_exit=1
        fi
        if [ ${#servers[@]} -gt 0 ]; then
            echo "Refusing to run because roadblock is not being used and servers are used"
            rb_do_exit=1
        fi
        if [ "$rb_do_exit" == "1" ]; then
            exit_error "Exiting do to roadblock/client/server conflict" endpoint_deploy
        fi
    else
        use_rb=1
    fi
    if [ -z "$run_id" ]; then
        exit_error "The run ID was not provided" endpoint-deploy
    fi
    if [ -z "$base_run_dir" ]; then
        exit_error "--base-run-dir was not provided" endpoint-deploy
    fi
    if [ ! -d "$base_run_dir" ]; then
        exit_error "The run directory [$base_run_dir] does not exist" endpoint-deploy
    fi
    if [ ! -e "$config_dir/rickshaw_id.rsa" ]; then
        exit_error "Could not find $config_dir/rickshaw_id.rsa" endpoint-deploy
    fi
    if [ ! -e "$client_server_bench_cmds_dir/client/1" ]; then
        exit_error "client bench cmd file $client_server_bench_cmds_dir/client/1 not found" endpoint-deploy
    fi
}

function verify_ssh_login() {
    local user host
    user=$1; shift
    host=$1; shift

    do_ssh $user@$host uptime >/dev/null || exit_error "Could not ssh to $host -- did you setup passwordless login using SSH keys?"
}

function do_ssh() {
    local user_host user host ssh_cmd
    user_host=$1; shift
    user=`echo $user_host | awk -F@ '{print $1}'`
    host=`echo $user_host | awk -F@ '{print $2}'`
    ssh_cmd=""
    if [ -z "$user" ]; then
        exit_error "do_ssh: user was blank: $user_host"
    fi
    if [ -z "$host" ]; then
        exit_error "do_ssh: host was blank: $user_host"
    fi
    # the k8s endpoint is the only endpoint (as of now) that doesn't
    # force the user to have root privileges
    if [ "${endpoint_name}" != "k8s" -a "${user}" != "root" ]; then
        ssh_cmd="ssh $ssh_opts $user_host sudo bash -c \"$@\""
    else
        ssh_cmd="ssh $ssh_opts $user_host $@"
    fi
    $ssh_cmd
    local rc=$?
    return $rc
}

function do_scp() {
    # The following allows for using a non-root user>
    # If a non-root user is used, that user must have root-priv
    # no password prompt required.
    local src dst dst_sudo_cmd dst_path dst_user_host dst_user dst_cmd
    local src_sudo_cmd src_path src_user_host src_user src_sudo_cmd src_cmd
    src=$1; shift # [<user>@<host>:]<source> source can be a dir or file
                        # If a dir, the full dir is used when copied to the destination
    dst=$1; shift # [<user>@<host>:]<destination> destination should be a dir, not a file

    if echo $dst | grep -q -- "@"; then
        dst_sudo_cmd=""
        dst_path=`echo $dst | awk -F: '{print $2}'`
        dst_user_host=`echo $dst | awk -F: '{print $1}'`
        dst_user=`echo $dst_user_host | awk -F@ '{print $1}'`
        if [ "$dst_user" != "root" ]; then
            local dst_sudo_cmd="sudo"
        fi
        dst_cmd="ssh $ssh_opts $dst_user_host $dst_sudo_cmd tar -C $dst_path -xf -"
    else
        dst_cmd="tar -C $dst -xf -"
    fi

    if echo $src | grep -q -- "@"; then
        src_sudo_cmd=""
        src_path=`echo $src | awk -F: '{print $2}'`
        src_user_host=`echo $src | awk -F: '{print $1}'`
        src_user=`echo $src_user_host | awk -F@ '{print $1}'`
        if [ "$src_user" != "root" ]; then
            src_sudo_cmd="sudo"
        fi
        src_cmd="ssh $ssh_opts $src_user_host $src_sudo_cmd tar -cf - $src_path"
    else
        src_cmd="tar -cf - $src"
    fi

    $src_cmd | $dst_cmd
}

function do_roadblock() {
    echo "do_roadblock() ARGC: $#"
    local label=$1; shift
    local role=$1; shift
    local timeout=$1; shift
    local message=""
    if [ $# -gt 0 ]; then
        if [ -n "${1}" ]; then
            message="$1"; shift # A file for user-messages or "" if none
            echo "Going to send this user message file: $message"
        fi
    fi
    if [ -z "${message}" ]; then
        echo "Not going to send user message file"
    fi
    ###  followers or members remain in $@  ###
    if [ -z "$role" ]; then
        exit_error "do_roadblock(): role not defined"
    fi
    if [ $use_rb -eq 0 ]; then
        echo "Not running roadblock"
        return 0
    fi

    printf "\n\n"
    echo "Starting roadblock [`date`]"
    echo "role: $role"
    local uuid="$rb_id:$label"
    echo "uuid (without attempt ID embedded): $uuid"
    echo "timeout: $timeout"
    abort_opt=""
    if [ "$timeout" == "abort" ]; then
        timeout="90"
        echo "Going to send abort signal"
        abort_opt=" --abort"
    fi
    local msgs_log_file="$roadblock_msgs_dir/$label.json"
    local cmd="/usr/local/bin/roadblock.py"
    cmd+=" --redis-server localhost --timeout $timeout --redis-password $rb_passwd --role=$role --message-log=$msgs_log_file $abort_opt"
    if [ -n "$message" ]; then
        cmd+=" --user-message $message"
    fi
    if [ "$role" == "follower" ]; then
        cmd+=" --leader-id controller --follower-id $endpoint_label"
    elif [ "$role" == "leader" ]; then
        if [ -z "$1" ]; then
            exit_error "do_roadblock(): follower(s) not defined"
        fi
        cmd+=" --leader-id endpoint"
        local followers=""
        while [ $# -gt 0 ]; do
            cmd+=" --followers $1"
            followers+=" $1"
            shift
        done
        echo "followers: $followers"
    else
        exit_error "Roadblock role \"$role\" invalid"
    fi

    local attempts=0
    local rc=99
    local output=""
    while [ $attempts -lt $max_rb_attempts -a $rc -ne $rb_exit_success -a $rc -ne $rb_exit_abort ]; do
        let attempts=$attempts+1
        echo "attempt number: $attempts"
        echo "uuid: $attempts:$uuid"
        local rb_cmd="$cmd --uuid $attempts:$uuid"
        echo "going to run this roadblock command: ${rb_cmd}"
        echo "roadblock output BEGIN"
        ${rb_cmd}
        rc=$?
        echo "roadblock output END"
        echo "roadblock exit code: $rc"
        if [ -f ${msgs_log_file} ]; then
            echo "messages from roadblock:"
            cat ${msgs_log_file}
        fi
    done
    echo "total attempts: $attempts"
    echo "Completed roadblock [`date`]"
    printf "\n\n"

    return $rc
}

function prepare_roadblock_user_msgs_file {
    local iteration_sample_directory=$1; shift
    local roadblock_name=$1; shift

    local pending_tx_msgs=$(/bin/ls -1 ${cs_tx_msgs_dir})
    if [ ! -z "${pending_tx_msgs}" ]; then
        echo "Found queued messages in ${cs_tx_msgs_dir}, preparing them to send"

        mkdir -p ${cs_tx_msgs_dir}-sent
        user_msgs_file="${iteration_sample_directory}/rb-msgs-${roadblock_name}.json"

        echo "[" > "${user_msgs_file}"
        for msg in ${pending_tx_msgs}; do
            # TODO validate JSON schema
            echo "Adding ${msg} to ${user_msgs_file}"
            cat "${cs_tx_msgs_dir}/${msg}" >> "${user_msgs_file}"
            /bin/mv "${cs_tx_msgs_dir}/${msg}" "${cs_tx_msgs_dir}-sent"
            echo "," >> "${user_msgs_file}"
        done
        echo '{"recipient":{"type":"all","id":"all"},"user-object":{"sync":"'${roadblock_name}'"}}]' >> "${user_msgs_file}"

        echo "Contents of ${user_msgs_file}:"
        cat "${user_msgs_file}"
    else
        echo "No queued messages found in ${cs_tx_msgs_dir}"
        user_msgs_file=""
    fi
}

function evaluate_test_roadblock {
    local roadblock_name=$1; shift;
    local roadblock_rc=$1; shift;
    local iter_array_idx=$1; shift;

    if [ ${roadblock_rc} != 0 ]; then
        # something bad happened
        if [ ${roadblock_rc} == ${rb_exit_timeout} ]; then
            printf "[ERROR] roadblock '%s' timed out, attempting to exit and cleanly finish the run\n" "${roadblock_name}"

            quit=1
        elif [ ${roadblock_rc} == ${rb_exit_abort} ]; then
            printf "[WARNING] roadblock '%s' received an abort, stopping sample\n" "${roadblock_name}"
            sample_data_attempt_fail[${iter_array_idx}]=1;

            (( sample_data_failures[${iter_array_idx}]++ ))
            printf "sample failures is now: %d\n", ${sample_data_failures[${iter_array_idx}]}

            if [ ${sample_data_failures[${iter_array_idx}]} -ge ${max_sample_failures} ]; then
                sample_data_complete[${iter_array_idx}]=1

                printf "[ERROR] A maximum of %d failures for iteration %d has been reached\n" \
                       ${sample_data_failures[${iter_array_idx}]} \
                       ${sample_data_iteration_id[${iter_array_idx}]}
            fi

            abort=1
        fi
    fi

    local msgs_log_file="${roadblock_msgs_dir}/${roadblock_name}.json"
    if [ -f "${msgs_log_file}" ]; then
        echo "Found received messages file: ${msgs_log_file}"

        local count=0
        local roadblock_label=$(echo "${roadblock_name}" | awk -F: '{ print $2 }')

        local tmp_message_file=$(mktemp)
        jq -cr '.received[] | select(.payload.message.command == "user-object") | .payload.message' ${msgs_log_file} \
           > ${tmp_message_file}
        while read -u 9 line; do
            let count=${count}+1
            local msg="${roadblock_label}:${count}"
            local outfile="${cs_rx_msgs_dir}/${msg}"

            echo "Found user-object message:"
            echo -e "\tMessage:  ${line}"
            echo -e "\tSaved to: ${outfile}"

            echo "${line}" | jq '."user-object"' > "${outfile}"
        done 9< ${tmp_message_file}
        rm ${tmp_message_file}
    fi
}

function roadblock_exit_on_error() {
    local roadblock_rc=$1; shift

    if [ ${roadblock_rc} != 0 ]; then
        echo "roadblock_exit_on_error()"
        exit ${roadblock_rc}
    fi
}

function process_bench_roadblocks() {
    local endpoint_type=""
    if [ $# -gt 0 ]; then
        endpoint_type=$1; shift
    fi

    local quit=0
    local abort
    local timeout=$default_timeout
    local total_tests=0

    declare -A sample_data_iteration_id
    declare -A sample_data_sample_id
    declare -A sample_data_failures
    declare -A sample_data_complete
    declare -A sample_data_attempt_num
    declare -A sample_data_attempt_fail

    echo "Initializing data structures:"
    while read -u 9 line; do
        iter_samp=`echo ${line} | awk '{print $1}'`
        iter_id=`echo ${iter_samp} | awk -F- '{print $1}'`
        samp_id=`echo ${iter_samp} | awk -F- '{print $2}'`
        iter_array_idx=${total_tests}
        echo "iter_samp=${iter_samp} iter_id=${iter_id} samp_id=${samp_id} iter_array_idx=${iter_array_idx}"

        sample_data_iteration_id[${iter_array_idx}]=${iter_id}
        sample_data_sample_id[${iter_array_idx}]=${samp_id}
        sample_data_failures[${iter_array_idx}]=0
        sample_data_complete[${iter_array_idx}]=0
        sample_data_attempt_num[${iter_array_idx}]=0
        sample_data_attempt_fail[${iter_array_idx}]=0

        (( total_tests += 1 ))
    done 9< "${client_server_bench_cmds_dir}/client/1/start"

    echo "Total tests: ${total_tests}"

    local current_test=0
    while read -u 9 line; do
        if [ $quit -gt 0 ]; then
            break
        fi

        (( current_test += 1 ))

        iter_samp=`echo ${line} | awk '{print $1}'`
        iter_id=`echo ${iter_samp} | awk -F- '{print $1}'`
        samp_id=`echo ${iter_samp} | awk -F- '{print $2}'`
        let iter_array_idx=${current_test}-1
        #echo "iter_samp=${iter_samp} iter_id=${iter_id} samp_id=${samp_id} iter_array_idx=${iter_array_idx}"

        iter_samp_dir="${endpoint_run_dir}/iteration-${iter_id}/sample-${samp_id}"
        cs_msgs_dir="${iter_samp_dir}/msgs"
        cs_tx_msgs_dir="${cs_msgs_dir}/tx" # Messages a client, server, or endpoint wants to transmit
        cs_rx_msgs_dir="${cs_msgs_dir}/rx" # Messages a client, server, or endpoint has received
        for this_dir in "${iter_samp_dir}" "${cs_msgs_dir}" "${cs_tx_msgs_dir}" "${cs_rx_msgs_dir}"; do
            echo "mkdir -p ${this_dir}"
            mkdir -p "${this_dir}" || exit_error "Could not mkdir ${this_dir}"
        done

        abort=0
        while [ $quit -eq 0 -a \
                $abort -eq 0 -a \
                ${sample_data_complete[${iter_array_idx}]} -eq 0 -a \
                ${sample_data_failures[${iter_array_idx}]} -lt ${max_sample_failures} ]; do

            sample_data_attempt_fail[${iter_array_idx}]=0
            (( sample_data_attempt_num[${iter_array_idx}]++ ))

            printf "Starting iteration %d sample %d (test %d of %d) attempt number %d of %d\n" \
                   ${iter_id} \
                   ${samp_id} \
                   ${current_test} \
                   ${total_tests} \
                   ${sample_data_attempt_num[${iter_array_idx}]} \
                   ${max_sample_failures}

            user_msgs_file=""
            rb_name=""
            test_id=$(printf "%d-%d-%d" ${sample_data_iteration_id[${iter_array_idx}]} ${sample_data_sample_id[${iter_array_idx}]} ${sample_data_attempt_num[${iter_array_idx}]})
            rb_prefix=$(printf "%s:" ${test_id})

            ####################################################################
            rb_name=$(printf "%s%s" ${rb_prefix} "infra-start-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            rb_name=$(printf "%s%s" ${rb_prefix} "infra-start-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################
            rb_name=$(printf "%s%s" ${rb_prefix} "server-start-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            rb_name=$(printf "%s%s" ${rb_prefix} "server-start-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################
            rb_name=$(printf "%s%s" ${rb_prefix} "endpoint-start-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            echo "about to call endpoint_${endpoint_type}_test_start"
            endpoint_${endpoint_type}_test_start "${roadblock_msgs_dir}" "${test_id}" "${cs_tx_msgs_dir}"
            echo "returning from endpoint_${endpoint_type}_test_start"

            rb_name=$(printf "%s%s" ${rb_prefix} "endpoint-start-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################
            rb_name=$(printf "%s%s" ${rb_prefix} "client-start-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            msgs_log_file="${roadblock_msgs_dir}/${rb_name}.json"
            if [ -f ${msgs_log_file} ]; then
                next_timeout=`jq -r '.received[] | .payload.message."user-object".timeout ' ${msgs_log_file} | grep -v null`
                if [ ! -z "${next_timeout}" ]; then
                    timeout=${next_timeout}
                    printf "Found new client-start-end timeout value: %s\n" ${timeout}
                else
                    printf "Could not find new client-start-end timeout value!\n"
                fi
            else
                printf "Could not find %s\n" ${msgs_log_file}
            fi

            rb_name=$(printf "%s%s" ${rb_prefix} "client-start-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################
            # reset the timeout value in case it was changed
            if [ ${timeout} != ${default_timeout} ]; then
                timeout=${default_timeout}
                printf "Resetting timeout value: %s\n" ${timeout}
            fi

            rb_name=$(printf "%s%s" ${rb_prefix} "client-stop-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            rb_name=$(printf "%s%s" ${rb_prefix} "client-stop-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################
            rb_name=$(printf "%s%s" ${rb_prefix} "endpoint-stop-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            rb_name=$(printf "%s%s" ${rb_prefix} "endpoint-stop-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################
            rb_name=$(printf "%s%s" ${rb_prefix} "server-stop-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            echo "about to call endpoint_${endpoint_type}_test_stop"
            endpoint_${endpoint_type}_test_stop "${roadblock_msgs_dir}" "${test_id}"
            echo "returning from endpoint_${endpoint_type}_test_stop"

            rb_name=$(printf "%s%s" ${rb_prefix} "server-stop-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################
            rb_name=$(printf "%s%s" ${rb_prefix} "infra-stop-begin")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}

            rb_name=$(printf "%s%s" ${rb_prefix} "infra-stop-end")
            prepare_roadblock_user_msgs_file "${iter_samp_dir}" "${rb_name}"
            do_roadblock "${rb_name}" "follower" ${timeout} "${user_msgs_file}"
            roadblock_rc=$?
            evaluate_test_roadblock "${rb_name}" ${roadblock_rc} ${iter_array_idx}
            ####################################################################

            local sample_result
            if [ ${sample_data_attempt_fail[${iter_array_idx}]} -eq 0 -a \
                 $abort == 0 -a \
                 $quit == 0 ]; then
                sample_data_complete[${iter_array_idx}]=1

                sample_result="successfully"
            else
                sample_result="unsuccessfully"

                if [ $abort != 0 ]; then
                    printf "[WARNING] An abort signal has been encountered for this sample!\n";
                fi

                if [ $quit != 0 ]; then
                    printf "[ERROR] A quit signal has been encountered!\n";
                fi
            fi

            printf "Completed iteration %d sample %d (test %d of %d) attempt number %d of %d %s\n" \
                   ${iter_id} \
                   ${samp_id} \
                   ${current_test} \
                   ${total_tests} \
                   ${sample_data_attempt_num[${iter_array_idx}]} \
                   ${max_sample_failures} \
                   ${sample_result}
        done
    done 9< "$client_server_bench_cmds_dir/client/1/start"
}

function process_roadblocks() {
    local endpoint_type=$1; shift
    local new_followers="$@"
    local msg_file=""
    local roadblock_rc

    if [ ! -z "$new_followers" ]; then
        echo "pwd: `/bin/pwd`"
        msg_file="$endpoint_run_dir/new-followers.json"
        echo "new_followers: $new_followers"
        echo '[{"recipient":{"type":"all","id":"all"},"user-object":{"new-followers":[' >$msg_file
        echo $new_followers | sed  -re 's/^\s+//' -re 's/\s+$//' -re 's/\s+/,/g' -re 's/([^,]+)/"\1"/g' >>$msg_file
        echo ']}}]' >>$msg_file
        echo "ls: `/bin/ls`"
    fi


    do_roadblock "endpoint-deploy-begin" "follower" $endpoint_deploy_timeout $msg_file
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}

    do_roadblock "endpoint-deploy-end" "follower" $endpoint_deploy_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}


    do_roadblock "engine-init-begin" "follower" $client_server_script_start_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}

    do_roadblock "engine-init-end" "follower" $client_server_script_start_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}


    do_roadblock "get-data-begin" "follower" $default_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}

    do_roadblock "get-data-end" "follower" $default_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}


    do_roadblock "collect-sysinfo-begin" "follower" $default_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}

    # run packrat here somehow eventually

    do_roadblock "collect-sysinfo-end" "follower" $default_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}


    do_roadblock "start-tools-begin" "follower" $default_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}

    do_roadblock "start-tools-end" "follower" $default_timeout
    roadblock_rc=$?
    roadblock_exit_on_error ${roadblock_rc}


    process_bench_roadblocks $endpoint_type


    do_roadblock "stop-tools-begin" "follower" $default_timeout
    do_roadblock "stop-tools-end" "follower" $default_timeout


    do_roadblock "send-data-begin" "follower" $default_timeout
    do_roadblock "send-data-end" "follower" $default_timeout


    do_roadblock "endpoint-cleanup-begin" "follower" $default_timeout
    if [ ! -z "$endpoint_type" ]; then
        endpoint_${endpoint_type}_cleanup
    fi
    do_roadblock "endpoint-cleanup-end" "follower" $default_timeout
}

function is_ip() {
    local ip=$1; shift

    if echo "$ip" | egrep --silent '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}'; then
        return 0
    else
        return 1
    fi
}

function get_controller_ip() {
    local host endpoint_ip controller_ip

    host=$1
    shift

    if is_ip ${host}; then
        if ip addr | grep -q ${host}; then
            # the provided IP address is mine so it is the one to use
            echo ${host}
            return 0
        else
            # the provided IP address is not mine -- so it is the endpoint's
            endpoint_ip=${host}
        fi
    else
        endpoint_ip=$(host ${host} | grep "has address" | head -1 | awk -F"has address " '{ print $2 }')

        if ! is_ip ${endpoint_ip}; then
            exit_error "Failed to determine endpoint IP address (got '${endpoint_ip}')"
            return 1
        fi
    fi

    # Now that we have the endpoint's IP, figure out what controller
    # IP this endpoint will need to use to contact the controller
    controller_ip=$(ip route get ${endpoint_ip} | head -1 | awk -F"src " '{ print $2 }' | awk '{ print $1 }')

    if ! is_ip ${controller_ip}; then
        exit_error "Failed to determine controller IP address (got '${controller_ip}')"
        return 1
    else
        echo ${controller_ip}
        return 0
    fi
}

function load_json_setting() {
    local query var value

    query="$1"
    typeset -n var=$2

    echo "load_json_setting():"

    value=$(${TOOLBOX_HOME}/bin/get-json-settings.pl --settings "${config_dir}/rickshaw-settings.json.xz" --query ${query})
    if [ $? != 0 ]; then
        echo "available json settings:"
        xzcat ${json_settings_file}
        exit_error "query '${query}' failed to load a json setting"
    else
        var=${value}
        echo "json setting query '${query}' returned '${var}'"
    fi

    return 0
}

function load_settings() {
    if [ "$do_validate" != 1 ]; then
        load_json_setting "roadblock.timeouts.default" default_timeout
        load_json_setting "roadblock.timeouts.endpoint-deploy" endpoint_deploy_timeout
        load_json_setting "roadblock.timeouts.client-server-start" client_server_script_start_timeout
        load_json_setting "roadblock.timeouts.move-data" endpoint_move_data_timeout
    fi
}
