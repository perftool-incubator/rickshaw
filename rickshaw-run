#!/usr/bin/perl
# -*- mode: perl; indent-tabs-mode: nil; perl-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl
#
# Author: Andrew Theurer
#
# Rickshaw will run a benhcmark for you.  Please see README.md for instructions.


use strict;
use warnings;
use Cwd;
use Data::UUID;
use File::pushd;
use File::Basename;
use File::Temp qw(tempdir);
use File::Copy;
use File::Path qw(make_path);
use JSON::XS;
use JSON::Validator;
use Data::Dumper;

BEGIN {
    if (!(exists $ENV{'TOOLBOX_HOME'} && -d "$ENV{'TOOLBOX_HOME'}/perl")) {
        print "This script requires libraries that are provided by the toolbox project.\n";
        print "Toolbox can be acquired from https://github.com/perftool-incubator/toolbox and\n";
        print "then use 'export TOOLBOX_HOME=/path/to/toolbox' so that it can be located.\n";
        exit 1;
    }
}
use lib "$ENV{'TOOLBOX_HOME'}/perl";
use toolbox::json;
use toolbox::logging;
use toolbox::run;
use toolbox::jsonsettings;

$toolbox::logging::debug = 0;

my $ug = Data::UUID->new;
my %defaults = ( "num-samples" => 1, "tool-group" => "default", "test-order" => "s",
                 "base-run-dir" => tempdir(), "id" => $ug->create_str(),
                 "max-sample-failures" => 1, "max-rb-attempts" => 1);

my @utilities = ( "packrat" );

my $jsonsettings;
my $use_workshop = 0;
my %bench_configs;
my %bench_dirs;
my %benchmark_to_ids;
my %ids_to_benchmark;
my @endpoints;
#my %userenvs;
my %image_ids; # {$benchmark-type}{$userenv}
my %run; # A multi-dimensional, nested hash, schema TBD
         # This hash documents what was run.
my $redis_passwd = "flubber"; # TODO: make this cmdline setting
my $rb_bin = "/usr/local/bin/roadblocker.py";
my $rb_module = "/usr/local/bin/roadblock.py";
my $messages_ref;
my $default_rb_timeout;
my $collect_sysinfo_timeout;
my $endpoint_deploy_timeout;
my $engine_script_start_timeout;
my $endpoint_move_data_rb_timeout;
(my $hostname_cmd, my $hostname, my $hostname_rc) = run_cmd('hostname');
chomp ($hostname);
my $hostname_md5 = Digest::MD5->new;
$hostname_md5->add($hostname);
my $hostname_hash = $hostname_md5->hexdigest;
printf "Controller hostname is '%s' and it's hash identifier is '%s'\n", $hostname, $hostname_hash;
my $base_rb_leader_cmd = $rb_bin . " --role=leader --redis-server=localhost" .
                         " --redis-password=" . $redis_passwd;
my $base_rb_follower_cmd = $rb_bin . " --role=follower --redis-server=localhost" .
                           " --redis-password=" . $redis_passwd . "\$abort_opt";
my $config_dir;
my $engine_config_dir;
my $engine_bench_cmds_dir;
my $tool_cmds_dir;
my $run_dir;
my $base_endpoint_run_dir;
my $engine_run_dir;
my $engine_logs_dir;
my $engine_archives_dir;
my $engine_run_script;
my $engine_library_script;
my $engine_roadblock_script;
my $engine_roadblock_module;
my $iterations_dir;
my $rickshaw_project_dir;
my $roadblock_msgs_dir;
my $endpoint_roadblock_opt = "";
my $workshop_roadblock_opt = "";
my %utility_configs;
my %tools_configs;
my @tools_params;
{
    # Get the absolute path of the rickshaw project directory
    my $pushd_dir = pushd(dirname($0));
    $rickshaw_project_dir = getcwd();
}
my $bench_schema_file = $rickshaw_project_dir . "/schema/benchmark.json";
my $tool_schema_file = $rickshaw_project_dir . "/schema/tool.json";
my $run_schema_file = $rickshaw_project_dir . "/schema/run.json";
my $utility_schema_file = $rickshaw_project_dir . "/schema/utility.json";
my $bench_params_schema_file = $rickshaw_project_dir . "/schema/bench-params.json";
my $tool_params_schema_file = $rickshaw_project_dir . "/schema/tool-params.json";
my $roadblock_exit_success = 0;
my $roadblock_exit_timeout = 3;
my $roadblock_exit_abort = 4;
my $roadblock_exit_input = 2;
my $abort_via_roadblock = 0;
my $workshop_base_cmd;
my $workshop_force_builds;
my $cs_conf_file;
my %cs_conf;

my @tests;
my %clients_servers;
my @rb_cs_ids; # unique IDs for roadblock
my $abort_test_id;
my $skip_registry_auth;
my @active_followers;

(my $detect_arch_cmd, my $arch, my $detect_arch_cmd_rc) = run_cmd('uname -m');
chomp($arch);

$SIG{'INT'} = sub {
    print "Caught a CTRL-C/SIGINT, aborting via roadblock!\n";
    $abort_via_roadblock = 1;
};

sub usage {
    print "\nusage:\n\n";
    print "--json-validator        Path to json schema validation utility\n";
    print "--engine-dir            Directory where the engine project exists\n";
    print "--workshop-dir          Directory where workshop project exists\n";
    print "--packrat-dir           Directory where the packrat project exists\n";
    print "--roadblock-dir         Directory where workshop project exists\n";
    print "--bench-dir             Directory where benchmark helper project exists\n";
    print "--bench-params          File with benchmark parameters to use\n";
    print "--tools-dir             Directory where *all* tool subprojects exist (like \$CRUCIBLE_HOME/subprojects/tools)\n";
    print "--tool-params           File with tool parameters to use\n";
    print "--num-samples           The number of sample exeuctions to run for each benchmark iteration\n";
    print "--max-sample-failures   The total number of benchmark sample executions that are tolerated\n";
    print "--test-order            's' = run all samples of an iteration first\n";
    print "                        'i' = run all iterations of a sample first\n";
    print "                        'r' = run a sample from a random iteration one at a time (ie. chaos mode)\n\n";
    print "--max-rb-attempts       The number of times to try a given roadblock\n";
}

sub find_files {
    my $path = shift;

    my @files;

    if (-d $path) {
        opendir(DH, $path);
        my @entries = readdir(DH);
        close(DH);
        foreach my $entry (@entries) {
            my $entry_path = $path . '/' . $entry;

            if (($entry =~ /^\.$/) ||
                ($entry =~ /^\.\.$/) ||
                ($entry =~ /^\.git$/) ||
                ($entry =~ /^docs$/) ||
                ($entry =~ /\.md$/) ||
                ($entry =~ /^\.github$/)) {
                next;
            }

            if (-d $entry_path) {
                push(@files, @{find_files($entry_path)})
            } elsif (-e $entry_path) {
                push (@files, $entry_path);
            }
        }
    } elsif (-e $path) {
        push (@files, $path);
    }

    return(\@files);
}

sub do_roadblock {
    my $label = shift;
    my $timeout = shift;
    # $_[0] is for a reference to the messages data structure

    my $follower;
    my $follower_param = "";
    for (my $i=1; $i<scalar(@_); $i++) {
        $follower = $_[$i];
        $follower_param .= " --followers=" . $follower;
    }

    my $attempts = 0;
    my $rc = 99;
    my $file_rc;
    my $output;
    my $role = "leader";
    my $uuid = $run{'id'} . ":" . $label;

    my $msgs_log_file = $roadblock_msgs_dir . "/" . $label . ".json";
    (my $date_cmd, my $date, my $date_rc) = run_cmd('date');
    chomp $date;
    printf "Roadblock: %s ", $date;
    while ($attempts < $run{'max-rb-attempts'} and $rc != $roadblock_exit_success and $rc != $roadblock_exit_abort) {
        $attempts++;
        my $this_uuid = $attempts . ":" . $uuid;
        printf "role: %s ", $role;
        printf "attempt number: %d ", $attempts;
        printf "uuid: %s\n", $this_uuid;
        my $cmd = $base_rb_leader_cmd .
            " --leader-id=controller" .
            " --uuid=" . $this_uuid .
            " --timeout=" . $timeout .
            " --message-log=" . $msgs_log_file .
            $follower_param;
        if ($abort_via_roadblock) {
            $cmd .= " --abort";
        }
        debug_log(sprintf "roadblock leader command:%s\n", $cmd);
        ($cmd, $output, $rc) = run_cmd($cmd);
        debug_log(sprintf "roadblock leader rc:%s\n", $rc);
        debug_log(sprintf "roadblock leader output:\n%s\n", $output);
        ($file_rc, $_[0]) = get_json_file($msgs_log_file);
        if ($file_rc > 0 or ! defined $_[0]) {
            printf "Could not open the messages log file: %s\n", $msgs_log_file;
            exit 1;
        }
        if ( $rc != $roadblock_exit_success) {
            printf "roadblock output BEGIN\n";
            printf "%s", $output;
            printf "roadblock rc: %d\n", $rc;
            printf "roadblock output END\n";
        }
        if ( $rc == $roadblock_exit_abort ) {
            printf "roadblock messages\n";
            foreach my $msg (@{ $_[0]{'received'} }) {
                if (exists $$msg{'payload'}{'message'}{'user-object'} and exists $$msg{'payload'}{'message'}{'user-object'}{'error'}) {
                    printf "\nError from %s:\n%s\n\n", $$msg{'payload'}{'sender'}{'id'}, $$msg{'payload'}{'message'}{'user-object'}{'error'};
                }
            }
        }
    }
    if ($rc == $roadblock_exit_abort or $rc == $roadblock_exit_success) {
        ($file_rc, $_[0]) = get_json_file($msgs_log_file);
        if ($file_rc > 0 or ! defined $_[0]) {
            printf "Could not open the messages log file on abort/exit: %s\n". $msgs_log_file;
            exit 1;
        }
        return $rc;
    } else {
        my @dropped_followers = ();
        foreach my $line (split(/\n/, $output)) {
            if ($line =~ /These followers/) {
                my @line_pieces = split(/: /, $line);
                push @dropped_followers, split(/\s/, $line_pieces[1]);
            }
        }
        debug_log(sprintf "roadblock dropped followers: %s\n", join(" ", @dropped_followers));
        return $rc, @dropped_followers;
    }
}

sub dump_params {
    my $default_role = 'client';

    my $params_ref = shift;
    my $cs_id = shift;
    my $engine = shift // $default_role;
    my $params_str = "";
    my $benchmark;
    if (defined $cs_id) {
        $benchmark = $ids_to_benchmark{$cs_id};
    }

    foreach my $param (@{ $params_ref }) {
        my $arg = $$param{'arg'};
        my $val = $$param{'val'};
        my $bench = $$param{'benchmark'};
        my $id;
        if (exists $$param{'id'}) {
            $id = $$param{'id'};
        }
        # fallback to client role when role is undefined in json
        my $role = $$param{'role'} // $default_role;

        if (! defined $id or (defined $cs_id and $id eq $cs_id)) {
            if (defined $benchmark and $bench eq $benchmark) {
                # only dump when role=engine or role=all
                if ( $role eq $engine || $role eq 'all') {
                    if (defined $val && length $val) {
                        if (defined $cs_id) {
                            $val =~ s/\%client-id\%/$cs_id/;
                        }
                        $params_str .= " --" . $arg . "=" . $val;
                    } else {
                        $params_str .= " --" . $arg;
                    }
                }
            }
        }
    }
    $params_str =~ s/^\s//;
    return $params_str;
}

sub file_newer_than {
    my $file = shift;
    my $epoch_sec = shift;
    {
        (my $cmd, my $file_time, my $cmd_rc) = run_cmd("/bin/ls -l --time-style=+%s $file");
        chomp($file_time);
        # -rwxrwxr-x. 1 someuser somegroup 4656 1582742663 engine-script
        if ($file_time =~ /\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\d+)\s+.*/) {
            if ($1 > $epoch_sec) {
                return 1;
            }
        }
    }
    return 0;
}

sub add_endpoint {
    my $endpoint_ref = shift;
    my $type = shift;
    my $opts = shift;
    my $num = 1;
    for my $entry (@$endpoint_ref) {
        $num++ if ($$entry{'type'} eq $type);
    }
    my %endpoint = ( 'type' => $type, 'opts' => $opts, 'label' => $type . "-" . $num);
    push(@$endpoint_ref, \%endpoint);
}

sub dump_endpoint_types {
    my $endpoint_ref = shift;
    my @labels;
    foreach my $endpoint (@$endpoint_ref) {
        push(@labels, $$endpoint{'type'})
    }
    return @labels;
}

sub dump_endpoint_labels {
    my $endpoint_ref = shift;
    my @labels;
    foreach my $endpoint (@$endpoint_ref) {
        push(@labels, $$endpoint{'label'})
    }
    return @labels;
}

sub dir_entries {
    my $dir = shift;
    my $pattern = shift;
    my @entries;
    if (! -e $dir) {
        die "The directory does not exist: $dir";
    }
    opendir(DH, $dir);
    @entries =  readdir(DH);
    if (defined $pattern) {
        @entries =  grep(/$pattern/, @entries);
    }
    close DH;
    return @entries;
}

sub calc_image_md5 {
    my $workshop_base_cmd = shift;
    my $userenv_arg = shift;
    die "calc_image_md5(): \$userenv_arg must be defined" if (!defined $userenv_arg);
    my $req_args = shift;
    my $arch_suffix = shift;
    my $workshop_sub_cmd;
    if (defined $req_args) {
        $workshop_sub_cmd = $workshop_base_cmd . " " . $userenv_arg . " " . $req_args;
    } else {
        $workshop_sub_cmd = $workshop_base_cmd . " " . $userenv_arg;
    }
    my $workshop_config_cmd = $workshop_sub_cmd . " --label config-analysis --dump-config true";
    my $workshop_files_cmd = $workshop_sub_cmd . " --label files-listing --dump-files true";
    (my $cmd, my $cmd_output, my $cmd_rc) = run_cmd($workshop_config_cmd);
    my @config_analysis_output = split(/\n/, $cmd_output);
    if ($cmd_rc > 0) {
        printf "Workshop dump config failed:\n";
        printf "%s\n", join("\n", @config_analysis_output);
        exit 1;
    }
    my $break_line = 0;
    for (my $i=0; $i<scalar(@config_analysis_output); $i++) {
        if ($config_analysis_output[$i] =~ /Config dump:/) {
            $break_line = $i;
        }
    }
    splice(@config_analysis_output, 0, $break_line+1);

    # The second part of the hash input is the *content* of certain files
    # Start with workshop code and schema, which when changed will
    # trigger new builds.
    my @files = ($run{'workshop-dir'} . "/workshop.pl", $run{'workshop-dir'} . "/schema.json");

    # Add to the file list all the files that workshop identifies
    # as being copied into the userenv
    ($cmd, $cmd_output, $cmd_rc) = run_cmd($workshop_files_cmd);
    my @files_dump_output = split(/\n/, $cmd_output);
    if ($cmd_rc > 0) {
        printf "Workshop dump files failed:\n";
        printf "%s\n", join("\n", @files_dump_output);
        exit 1;
    }
    $break_line = 0;
    for (my $i=0; $i<scalar(@files_dump_output); $i++) {
        if ($files_dump_output[$i] =~ /Files dump:/) {
            $break_line = $i
        }
    }
    splice(@files_dump_output, 0, $break_line+1);
    foreach my $dumped_file (@files_dump_output) {
        if ($dumped_file !~ /^\[VERBOSE\]|^replacing/) {
            debug_log(sprintf "found file from workshop [%s]\n", $dumped_file);

            my $real_path = Cwd::realpath($dumped_file);
            if ($real_path ne $dumped_file) {
                debug_log(sprintf "file from workshop [%s] is a link to [%s]\n", $dumped_file, $real_path);
                $dumped_file = $real_path;
            }

            if (-f $dumped_file) {
                push(@files, $dumped_file);
            } elsif (-d $dumped_file) {
                debug_log(sprintf "file from workshop [%s] is actually a directory...\n", $dumped_file);
                my @found_files = @{find_files($dumped_file)};
                foreach my $found_file (@found_files) {
                    debug_log(sprintf "found file [%s]\n", $found_file);
                    push(@files, $found_file);
                }
            }
        }
    }

    # compute an md5 hash of relevant information to identify the
    # userenv
    my $md5 = Digest::MD5->new;
    my $coder = JSON::XS->new->canonical;

    # First is the Initial hash calc on workshop reqs
    $md5->add(join("", @config_analysis_output));

    # Second is the hashing contents of files
    for my $file (@files) {
        open(my $fh, $file);
        binmode($fh);
        $md5->add($file);
        $md5->addfile($fh);
        close($fh);
    }
    my $base_hash = $md5->hexdigest;
    my $full_hash = $base_hash . "_" . $arch_suffix;
    return $full_hash;
}

sub remote_image_found {
    my $image = shift;
    my $full_url;
    if ($image =~ /:/) {
        $full_url = $image;
    } else {
        $full_url = $run{'dest-image-url'} . ":" . $image;
    }
    debug_log(sprintf "Checking for remote workshop image: %s... ", $full_url);
    my $skopeo_url;
    if (($full_url =~ /^dir:/) || ($full_url =~ /^docker:\/\//)) {
        $skopeo_url = $full_url;
    } else {
        $skopeo_url = "docker://" . $full_url;
    }
    my $cmd = "skopeo inspect " . "--tls-verify=" . $run{'reg-tls-verify'} . " " . $skopeo_url . " 2>&1";
    debug_log(sprintf "running: %s\n", $cmd);
    ($cmd, my $output, my $cmd_rc) = run_cmd($cmd);
    if ($cmd_rc == 0) {
        debug_log(sprintf "found\n");
        return 1;
    } else {
        debug_log(sprintf "missing\n");
        return 0;
    }
}

sub local_image_found {
    my $image = shift;
    my $full_url;
    if ($image =~ /:/) {
        $full_url = $image;
    } else {
        $full_url = $run{'source-image-url'} . ":" . $image;
    }
    debug_log(sprintf "Checking for local workshop image: %s... ", $full_url);
    my $cmd = "buildah images " . $full_url;
    debug_log(sprintf "cmd:\n%s\n\n", $cmd);
    ($cmd, my $output, my $cmd_rc) = run_cmd($cmd);
    debug_log(sprintf "output:\n%s\n\n", $output);
    if ($cmd_rc == 0) {
        debug_log(sprintf "found\n");
        return 1;
    } else {
        debug_log(sprintf "missing\n");
        debug_log(sprintf "All buildah images:\n");
        my $cmd = "buildah images";
        ($cmd, my $output, my $cmd_rc) = run_cmd($cmd);
        debug_log(sprintf "output:\n%s\n\n", $output);
        return 0;
    }
}

sub workshop_build_image {
    my $workshop_base_cmd = shift;
    my $stage = shift;
    my $userenv_arg = shift;
    die "workshop_build_image(): userenv_arg must be defined\n" if !defined $userenv_arg;
    my $req_args = shift;
    my $tag = shift;
    my $skip_update = shift;
    if (!defined $skip_update) {
        printf "skip_update was not defined, so setting to false\n";
        $skip_update = "false";
    }
    for (my $i=0; $i<@{$cs_conf{'config'}{'labels'}}; $i++) {
        if ($cs_conf{'config'}{'labels'}[$i] =~ /hostname-hash/) {
            splice(@{$cs_conf{'config'}{'labels'}}, $i, 1);
            if (put_json_file($cs_conf_file, \%cs_conf) > 0) {
                printf "workshop_build_image(): put_json_file(): %s: remove failed\n", $cs_conf_file;
                exit 1;
            }
            last;
        }
    }
    # insert the hostname-hash after all tag checking has been done to
    # avoid creating unique tags per controller
    push(@{$cs_conf{'config'}{'labels'}}, 'hostname-hash=' . $hostname_hash);
    if (put_json_file($cs_conf_file, \%cs_conf) > 0) {
        printf "workshop_build_image(): put_json_file(): %s: add failed\n", $cs_conf_file;
        exit 1;
    }
    my $proj;
    if (defined $run{'reg-proj'}) {
        $proj = $run{'reg-host'} . "/" . $run{'reg-proj'};
    } else {
        $proj = $run{'reg-host'};
    }
    my $workshop_build_cmd = $workshop_base_cmd
                             . " --skip-update " . $skip_update
                             . " " . $userenv_arg
                             . " " . $req_args
                             . " --proj " . $proj
                             . " --label " . $run{'reg-label'}
                             . " --tag " . $tag;
    debug_log(sprintf "Going to generate a new engine container image with this workshop cmd:\n\n %s\n", $workshop_build_cmd);
    ($workshop_build_cmd, my $workshop_output, my $workshop_rc) = run_cmd($workshop_build_cmd);
    my @workshop_output = split(/\n/, $workshop_output);
    my $workshop_output_file = $run_dir . "/workshop.stage-" . $stage . "." . $tag . ".stdout.txt";
    my $fh = open_write_text_file($workshop_output_file) || die "Failed to open " . $workshop_output_file . " for writing\n";
    printf $fh "%s\n", join("\n", @workshop_output);
    close($fh);
    if ($workshop_rc > 0) {
        printf "Workshop build failed: rc=%d\n", $workshop_rc;
        printf "Workshop build command: %s\n", $workshop_build_cmd;
        printf "Workshop build output:\n";
        printf "%s\n", join("\n", @workshop_output);
        exit 1;
    }
    debug_log(sprintf "%s\n", join("\n", @workshop_output));
    # Becasue there can be a lot of non-JSON debug/info stuff in the output before the
    # actual JSON, find the JSON by starting at the end and scanning backwards
    my $workshop_json = "";
    for (my $i = scalar @workshop_output - 1; $i > 0; $i--) {
        $workshop_json = $workshop_output[$i] . $workshop_json;
        # Break out if we found all of the JSON
        # In this case the JSON begins with an array '['
        last if ($workshop_output[$i] eq "[");
    }
    my $coder = JSON::XS->new;
    my $workshop_ref = $coder->decode($workshop_json);
    my $workshop_image_id = $$workshop_ref[0]{'id'};
    return $workshop_image_id;
}

sub delete_local_image {
    my $image = shift;
    my $full_url;
    if ($image =~ /:/) {
        $full_url = $image;
    } else {
        $full_url = $run{'source-image-url'} . ":" . $image;
    }
    if (!local_image_found($image)) {
        printf "ERROR: delete_local_image(): could not find local image [%s] before delete\n", $full_url;
        printf "imgae: [%s]\n", $image;
        printf "full_url: [%s]\n", $full_url;
        printf "source-image-url: [%s]\n", $run{'source-image-url'};
        exit 1;
    }
    debug_log(sprintf "Deleting local image %s\n", $full_url);
    my $cmd = "buildah";
    $cmd .= " rmi " . " " . $full_url;
    ($cmd, my $output, my $cmd_rc) = run_cmd($cmd);
    if ($cmd_rc != 0) {
        printf "ERROR: delete_local_image(): rmi command [%s] failed with %d\nOutput:\n%s\n\n",
               $cmd, $cmd_rc, $output;
        exit 1;
    }
}

sub push_local_image {
    my $image_tag = shift;
    my $full_src_url = $run{'source-image-url'} . ":" . $image_tag;
    my $full_dest_url = $run{'dest-image-url'} . ":" . $image_tag;
    if ($full_dest_url =~ /^dir:/) {
        $full_dest_url =~ /^dir:(.*)/;
        my $image_dir = $1;
        if (! -d $image_dir) {
            printf "Creating local registry directory: %s\n", $image_dir;
            make_path($image_dir, { verbose => 1, error => \my $err } );
            if ($err && @$err) {
                print "make_path: encountered errors:\n";
                for my $diag (@$err) {
                    print Dumper $diag;
                }
            }
        }
    }
    if (!local_image_found($image_tag)) {
        die "ERROR: push_local_image(): could not find local image before push ($image_tag)";
    }
    my $cmd = "buildah";
    if (! $skip_registry_auth) {
        $cmd .= " --authfile " . $run{'reg-auth'};
    }
    $cmd .= " push --tls-verify=" . $run{'reg-tls-verify'} . " " . $full_src_url . " " . $full_dest_url;
    ($cmd, my $output, my $cmd_rc) = run_cmd($cmd);
    if ($cmd_rc != 0) {
        printf "ERROR: push_local_image(): push command [%s] failed with %d\nOutput:\n%s\n\n",
               $cmd, $cmd_rc, $output;
        exit 1;
    }
    if (!remote_image_found($image_tag)) {
        printf "WARNING: push_local_image(): failed to find remote image after push...retrying!\n";
        my $found_it = 0;
        for (my $i=1; $i<=20; $i++) {
            sleep 3;

            if (remote_image_found($image_tag)) {
                $found_it = 1;
                last;
                printf "NOTICE: push_local_image(): found image on retry attempt number %d\n", $i;
            } else {
                printf "NOTICE: push_local_image(): failed to find image on retry attempt number %d\n", $i;
            }
        }

        if (!$found_it) {
            die "ERROR: push_local_image(): could not find remote image after push ($image_tag)";
        }
    }
}

sub build_reqs {
    my $req_ref = shift;
    my $userenv = shift;
    my $benchmark = shift;
    return if (!$use_workshop);

    # Build an ordered list of requirements.  What order?  That depends.
    # We want the first requirements to be ones that are most commonly
    # used by many users, while also not being updated very often, followed
    # by lesser common or requirments that have their content changed more
    # frequently.
    #
    # If there is a requirment that is widely used and its contents might
    # change frequently, we should consider sourcing this requirement
    # after a container image is provisioned, but that generally only works
    # if the contents of the requirment is of type "files".  An example of
    # this is the engine-script from the engine subdirectory and various
    # scripts from benchmarks and tools..
    #
    # Why is this order important?  We build container images incrementally,
    # with the smallest one containing only the userenv, and build bigger and
    # bigger images, each with a new requirement.  Ultimately, a user would like
    # to match an existing built image with all of their requirments, but if
    # that does not exist, we want to match an imagewith as many requirements
    # as possible and add only what we need.

    # The most common requirement is expected to be source built bash
    # -- this provides a common bash feature set across all userenvs
    my $bash_req_file = $config_dir . "/bash-req.json";
    my %bash_req = (
                    'workshop' => {
                        'schema' => {
                            'version' => '2020.03.02'
                        }
                    },
                    'userenvs' => [
                        {
                            'name' => 'default',
                            'requirements' => [
                                'bash_src'
                            ]
                        }
                    ],
                    'requirements' => [
                        {
                            'name' => 'bash_src',
                            'type' => 'source',
                            'source_info' => {
                                'url' => 'https://mirrors.ocf.berkeley.edu/gnu/bash/bash-5.1.tar.gz',
                                'filename' => 'bash.tar.gz',
                                'commands' => {
                                    'unpack' => 'tar -xzf bash.tar.gz',
                                    'get_dir' => 'tar -tzf bash.tar.gz | head -n 1',
                                    'commands' => [
                                        './configure --prefix=/usr/local',
                                        'make',
                                        'make install',
                                        '/usr/local/bin/bash --version'
                                    ]
                                }
                            }
                        }
                    ]
                );
    if (put_json_file($bash_req_file, \%bash_req) > 0) {
        printf "build_container_image(): put_json_file() failed\n";
        exit 1;
    }
    push (@$req_ref, "--requirement " . $bash_req_file);

    # The next most common requirment is expected to be the toolbox.
    my $tb_req_file = $config_dir . "/toolbox-req.json";
    my %tb_req = (
                    'workshop' => {
                        'schema' => {
                            'version' => '2020.03.02'
                        }
                    },
                    'userenvs' => [
                        {
                            'name' => 'default',
                                'requirements' => [
                                    'toolbox'
                                ]
                        }
                    ],
                    'requirements' => [
                        {
                            'name' => 'toolbox',
                            'type' => 'files',
                            'files_info' => {
                                'files' => [
                                    {
                                        'src' => $ENV{'TOOLBOX_HOME'},
                                        'dst' => '/opt/toolbox'
                                    }
                                ]
                            }
                        }
                    ]
                );
    if (put_json_file($tb_req_file, \%tb_req) > 0) {
        printf "build_container_image(): put_json_file() failed\n";
        exit 1;
    }
    push (@$req_ref, "--requirement " . $tb_req_file);
    # The second toolbox req ensures the proper dependencies are installed
    push (@$req_ref, "--requirement " . $ENV{'TOOLBOX_HOME'} .  "/workshop.json");

    # ensure the proper python libraies are installed that roadblock needs
    push (@$req_ref, "--requirement " . $run{'roadblock-dir'} .  "/workshop.json");

    push (@$req_ref, "--requirement " . $rickshaw_project_dir . "/engine/workshop.json");
    foreach my $utility (@utilities) {
        if (exists $run{$utility . '-dir'}) {
            my $utility_req_file = $run{$utility . '-dir'} . "/workshop.json";
            if (-e $utility_req_file) {
                push (@$req_ref, "--requirement " . $utility_req_file);
            }
        }
    }
    foreach my $tool_entry (@tools_params) {
        push(@$req_ref, "--requirement " . $run{'tools-dir'} . "/" .  $$tool_entry{'tool'} . "/workshop.json ");
    }
    push (@$req_ref, "--requirement " . $bench_dirs{$benchmark} . "/workshop.json");
}

sub get_image_urls {
    if ($run{'reg-repo'} =~ /^(\w+:\/){0,1}([^\/]+\/){0,1}([^\/]+\/){0,1}([^\/]+)$/) {
        if (defined($1)) {
            $run{'reg-proto'} = $1;
            printf "reg-proto:     [%s]\n", $run{'reg-proto'};
        } else {
            $run{'reg-proto'} = '';
        }
        if (defined($2)) {
            $run{'reg-host'} = $2;
            if ($run{'reg-host'} =~ /(\w+)(:\d+)/) {
                $run{'reg-host'} = $1;
                $run{'reg-host-port'} = $2;
                debug_log(sprintf "reg-host:      [%s]\n", $run{'reg-host'});
                debug_log(sprintf "reg-host-port: [%s]\n", $run{'reg-host-port'});
            } else {
                $run{'reg-host'} =~ s/\/$//;
                $run{'reg-host-port'} = '';
                debug_log(sprintf "reg-host:      [%s]\n", $run{'reg-host'});
            }
        } else {
            $run{'reg-host'} = '';
        }
        if (defined($3)) {
            $run{'reg-proj'} = $3;
            $run{'reg-proj'} =~ s/\/$//;
            debug_log(sprintf "reg-proj:      [%s]\n", $run{'reg-proj'});
        }
        if (!defined $run{'reg-host'} and defined $run{'reg-proj'}) {
            $run{'reg-host'} = $run{'reg-proj'};
        } elsif (defined $run{'reg-host'} and !defined $run{'reg-proj'}) {
            $run{'reg-proj'} = $run{'reg-host'};
        } elsif (!defined $run{'reg-host'} and !defined $run{'reg-proj'}) {
            die "At least one of the host or the project must be present in --reg-repo / REG_REPO";
        }
        $run{'source-image-url'} = $run{'reg-host'} . "/" . $run{'reg-proj'};
        if (defined $run{'reg-host-port'}) {
            $run{'dest-image-url'} = $run{'reg-host'} . $run{'reg-host-port'} . "/" . $run{'reg-proj'};
        } else {
            $run{'dest-image-url'} = $run{'reg-host'} . "/" . $run{'reg-proj'};
        }
        if (defined $run{'reg-proto'}) {
            $run{'dest-image-url'} = $run{'reg-proto'} . $run{'dest-image-url'};
        }
        if (defined($4)) {
            $run{'reg-label'} = $4;
            debug_log(sprintf "reg-label:     [%s]\n", $run{'reg-label'});
            $run{'source-image-url'} .= "/" . $run{'reg-label'};
            debug_log(sprintf "source-image-url: [%s]\n", $run{'source-image-url'});
            $run{'dest-image-url'} .= "/" . $run{'reg-label'};
            debug_log(sprintf "dest-image-url: [%s]\n", $run{'dest-image-url'});
        } else {
            print "The label/repo was not defined in --reg-repo or RS_REG_REPO: [%s]\n", $run{'reg-repo'};
        }
    } else {
        die "The --reg-repo or RS_REG_REPO does not match the pattern [protocol:][host[:port]][/<project>]/<repo>: " . $run{'reg-repo'};
    }
}

sub source_container_image {
    # Ensure that the container image we need is either already in the container registry,
    # or build and push the image to the registry
    my $userenv = shift;
    my $benchmark = shift;
    my $container_arch = shift;
    my $image; # What gets returned
    my @local_images;

    $workshop_base_cmd =
    $run{'workshop-dir'} . "/workshop.pl" .
    " --log-level verbose " .
    " --config " . $cs_conf_file .
    " --param %bench-dir%=" . $bench_dirs{$benchmark} .
    " --param %engine-dir%=" . $rickshaw_project_dir . "/engine/" .
    " --param %rickshaw-dir%=" . $rickshaw_project_dir .
    " --reg-tls-verify=" . $run{'reg-tls-verify'} .
    " 2>&1";

    get_image_urls;
    printf "Sourcing container image for userenv '%s' and benchmark '%s'; this may take a few minutes\n", $userenv, $benchmark;

    my @requirements;
    build_reqs(\@requirements, $userenv, $benchmark);

    # First build a workshop-cmd args containing: (userenv_arg, req_args, tag), starting with the base userenv only (has no req_args),
    # then each additional item in the list is a userenv arg mathcing the md5sum of the previous image, plus one more requirement.
    # Keep adding to this list until @requirements is empty.
    my @workshop_args;
    my $userenv_arg;
    my $count = 0;
    (my $rc, my $userenv_ref) = get_json_file($rickshaw_project_dir . "/userenvs/" . $userenv . ".json");
    if ($rc != 0) {
        die "ERROR: Could not load userenv JSON file for '" . $userenv . "' due to non-zero return code " . $rc . ".  Are you sure this is a supported userenv?\n";
    }
    my $userenv_image = $$userenv_ref{'userenv'}{'origin'}{'image'} . ":" . $$userenv_ref{'userenv'}{'origin'}{'tag'};
    while (scalar @requirements > 0) {
        my $req_arg;
        my $skip_update;
        if ($count == 0) {
            $userenv_arg = " --userenv " . $rickshaw_project_dir . "/userenvs/" . $userenv . ".json";
            $req_arg = "";
            $skip_update = "false";
        } else {
            $req_arg = shift(@requirements);
            $skip_update = "true";
        }
        my $tag = calc_image_md5($workshop_base_cmd, $userenv_arg, $req_arg, $container_arch);
        my %args = ( 'userenv' => $userenv_arg, 'reqs' => $req_arg, 'tag' => $tag, 'skip-update' => $skip_update );
        push (@workshop_args, \%args);

        $count++;
        if (scalar @requirements > 0) {
            # Create a new userenv which just refers to the image just verified/built,,
            # which will be used as the userenv for the next image in this loop.
            #
            # We need some info from the original userenv, primarily
            # userenv.name and userenv.properties.packages, but we'll
            # copy all of it and only change what we need.
            #my $userenv_ref = get_json_file($rickshaw_project_dir . "/userenvs/" . $userenv . ".json");
            delete $$userenv_ref{'requirements'};
            my @reqs = ();
            @$userenv_ref{'requirements'} = \@reqs;
            $$userenv_ref{'userenv'}{'origin'}{'image'} = $run{'dest-image-url'};
            $$userenv_ref{'userenv'}{'origin'}{'tag'} = $tag;
            my $userenv_file = $config_dir . "/userenv-" . $tag . ".json";
            put_json_file($userenv_file, $userenv_ref);
            $userenv_arg = " --userenv " . $userenv_file;
        }
    }

    debug_log(sprintf "workshop_args:\n" . Dumper \@workshop_args);

    my $num_images = scalar @workshop_args;
    my $i;
    if ($workshop_force_builds eq "false") {
        # Now that we have all the info to build any stage of the container image we could need,
        # search for existing container images, starting with the most complete image first.
        printf "Searching for existing stages (1 to %d, %d being most complete)\n", $num_images, $num_images;
        $i = $num_images - 1;
        while ($i >= 0) {
            debug_log(sprintf "Checking for stage number %d (of %d)\n", $i + 1, $num_images);
            if (!remote_image_found($workshop_args[$i]{'tag'})) {
                if (!local_image_found($workshop_args[$i]{'tag'})) {
                    $i--;
                    next;
                } else {
                    push_local_image($workshop_args[$i]{'tag'});
                    last;
                }
            } else {
                last;
            }
        }
        if ($i == -1) {
            printf "Did not find any existing stages\n";
        } elsif ($i < $num_images - 1) {
            printf "Found stage number %d (of %d), need to build %d stage(s)\n", $i + 1, $num_images, $num_images - 1 - $i;
        } elsif ($i == $num_images - 1) {
            printf "Found most complete stage (number %d)\n", $i + 1;
        } else {
            printf "Something went wrong, stage number: %d, num_images: %d\n", $i + 1, $num_images;
            exit 1;
        }
    } elsif ($workshop_force_builds eq "true") {
        $i = -1;
        printf "Image building is forced, need to build %d stage(s)\n", $num_images;
    }
    $image = $run{'dest-image-url'} . ":" . $workshop_args[$i]{'tag'};
    # After finding the most complete image, build any "more" complete images until "most"
    # complete is built.
    $i++;
    if ($i == 0) {
        # The first stage pulls a userenv image (like fedora, stream, etc), and that
        # image needs to be deleted later, so save a reference to it here
        push(@local_images, $userenv_image);
    }
    my $x = 0;
    while ($x < $i) {
        printf "Processing stage %d (%s)...\n\tReady\n", $x + 1, $workshop_args[$x]{'tag'};
        $x++;
    }
    while ($i <= $num_images - 1) {
        printf "Processing stage %d (%s)...\n", $i + 1, $workshop_args[$i]{'tag'};
        my $begin = time();
        workshop_build_image($workshop_base_cmd, $i + 1, $workshop_args[$i]{'userenv'}, $workshop_args[$i]{'reqs'}, $workshop_args[$i]{'tag'}, $workshop_args[$i]{'skip-update'});
        my $end = time();
        printf "\tBuilding took %d seconds\n", $end - $begin;
        $begin = time();
        push_local_image($workshop_args[$i]{'tag'});
        $end = time();
        printf "\tPushing took %d seconds\n", $end - $begin;
        push(@local_images, $workshop_args[$i]{'tag'});
        $image = $run{'dest-image-url'} . ":" . $workshop_args[$i]{'tag'};
        $i++;
    }
    my $num_local_images = scalar @local_images;
    if ($num_local_images > 0) {
        printf "Deleting %d local images\n", $num_local_images;
        while (scalar @local_images) {
            delete_local_image(pop(@local_images));
        }
    }
    printf "Finished sourcing container image for userenv '%s'\n", $userenv;
    return $image;
}

sub process_bench_roadblocks {
    my $roadblock_rc;

    $roadblock_rc = do_roadblock("setup-bench-begin", $default_rb_timeout, \$messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    my $quit = 0;
    my $abort;
    my @sample_data;

    $roadblock_rc = do_roadblock("setup-bench-end", $default_rb_timeout, \$messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    for (my $tid = 0; $tid < scalar @tests; $tid++) {
        last if ($quit > 0);

        my $iter_id = $tests[$tid]{'iteration-id'};
        my $samp_id = $tests[$tid]{'sample-id'};
        my $iter_array_idx = $tid;

        if (! defined $sample_data[$iter_array_idx]) {
            $sample_data[$iter_array_idx] = {
                'iteration-id' => $iter_id,
                'sample-id' => $samp_id,
                'failures' => 0,
                'complete' => 0,
                'attempt-num' => 0,
                'attempt-fail' => 0
            };
        }

        my $test_id = $iter_id . "-" . $samp_id;
        my $timeout = $default_rb_timeout;

        $abort = 0;
        while (($quit == 0) and
               ($abort == 0) and
               ($sample_data[$iter_array_idx]{'complete'} == 0) and
               ($sample_data[$iter_array_idx]{'failures'} < $run{'max-sample-failures'})) {

            $sample_data[$iter_array_idx]{'attempt-fail'} = 0;
            $sample_data[$iter_array_idx]{'attempt-num'}++;

            printf "Starting iteration %d sample %d (test %d of %d) attempt number %d of %d\n",
                $iter_id,
                $samp_id,
                $tid+1,
                scalar(@tests),
                $sample_data[$iter_array_idx]{'attempt-num'},
                $run{'max-sample-failures'};

            my $messages_ref;
            my $roadblock_rc;
            my @dropped_followers;
            my $rb_name;
            my $test_id = $sample_data[$iter_array_idx]{'iteration-id'} . '-' . $sample_data[$iter_array_idx]{'sample-id'} . '-' . $sample_data[$iter_array_idx]{'attempt-num'};
            my $rb_prefix =  $test_id . ':';

            ####################################################################
            $rb_name = $rb_prefix . "infra-start-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            $rb_name = $rb_prefix . "infra-start-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################
            $rb_name = $rb_prefix . "server-start-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            $rb_name = $rb_prefix . "server-start-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################
            $rb_name = $rb_prefix . "endpoint-start-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            $rb_name = $rb_prefix . "endpoint-start-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################
            $rb_name = $rb_prefix . "client-start-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            my %messages = %{ $messages_ref };
            if (exists $messages{'received'}) {
                for my $message (@{ $messages{'received'} }) {
                    if (exists $$message{'payload'}{'message'}{'user-object'}{'timeout'}) {
                        $timeout = $$message{'payload'}{'message'}{'user-object'}{'timeout'};
                        printf "Found new client-start-end timeout value: %s\n", $timeout;
                    }
                }
            } else {
                printf "No messages received\n";
            }

            $rb_name = $rb_prefix . "client-start-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################
            # reset the timeout value in case it was changed
            if ($timeout != $default_rb_timeout) {
                $timeout = $default_rb_timeout;
                printf "Resetting timeout value: %s\n", $timeout;
            }

            $rb_name = $rb_prefix . "client-stop-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            $rb_name = $rb_prefix . "client-stop-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################
            $rb_name = $rb_prefix . "endpoint-stop-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            $rb_name = $rb_prefix . "endpoint-stop-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################
            $rb_name = $rb_prefix . "server-stop-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            $rb_name = $rb_prefix . "server-stop-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################
            $rb_name = $rb_prefix . "infra-stop-begin";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);

            $rb_name = $rb_prefix . "infra-stop-end";
            ($roadblock_rc, @dropped_followers) = do_roadblock($rb_name, $timeout, $messages_ref, @active_followers);
            ($abort, $quit) = evaluate_test_roadblock($rb_name, $roadblock_rc, \$sample_data[$iter_array_idx], \@active_followers, \@dropped_followers, $abort, $quit);
            remove_dropped_followers(\@active_followers, \@dropped_followers);
            ####################################################################

            my $sample_result;
            if (($sample_data[$iter_array_idx]{'attempt-fail'} == 0) &&
                ($abort == 0) &&
                ($quit == 0)) {
                $sample_data[$iter_array_idx]{'complete'} = 1;

                $sample_result = "successfully";
            } else {
                $sample_result = "unsuccessfully";

                if ($abort != 0) {
                    printf "[WARNING] An abort signal has been encountered!\n";
                }

                if ($quit != 0) {
                    printf "[ERROR] A quit signal has been encountered!\n";
                }
            }

            printf "Completed iteration %d sample %d (test %d of %d) attempt number %d of %d %s\n",
                $iter_id,
                $samp_id,
                $tid+1,
                scalar(@tests),
                $sample_data[$iter_array_idx]{'attempt-num'},
                $run{'max-sample-failures'},
                $sample_result;
        }
    }
}

# Apply envinronment variables
foreach my $e (qw(RS_NAME RS_EMAIL RS_TAGS RS_DESC RS_REG_AUTH RS_REG_REPO RS_REG_TLS_VERIFY)) {
    if (exists $ENV{$e}) {
        my $var = $e;
        $var =~ s/^RS_//;
        $var =~ tr/[A-Z]/[a-z]/;
        $var =~ s/_/\-/g;
        debug_log(sprintf("Found envornment variable: %s, assigning \"%s\" to %s\n", $e, $ENV{$e}, $var));
        $run{$var} = $ENV{$e};
    }
}

sub process_cmdline() {
    while (scalar @ARGV > 0) {
        my $p = shift @ARGV;
        debug_log(sprintf "processing \@ARGV, param: [%s]\n", $p);
        my $arg;
        my $val;
        if ( $p =~ /^\-\-(\S+)/ ) {
            $arg = $1;
            if ( $arg =~ /^(\S+)=(.*)/ ) { # '--arg=val'
                $arg = $1;
                $val = $2;
            } else { # '--arg val'
                $val = shift @ARGV;
            }
        } else {
            printf "[ERROR]malformed cmdline parameter: %s\n", $p;
            usage;
            exit 1;
        }
        debug_log(sprintf "processing \@ARGV, arg is: [%s], val is: [%s]\n", $arg, $val);
        if ($arg eq "endpoint") {
            $val =~ /^(\w+),(.*)$/;
            add_endpoint(\@endpoints, $1, $2);
        } elsif ($arg =~ /^debug$/) {
            $toolbox::logging::debug = $val;
        } elsif ($arg =~ /^help$/) {
            usage;
            exit 0;
        } elsif ($arg =~ /^base-run-dir$|^workshop-dir$|^packrat-dir$|^bench-dir$|^roadblock-dir$|^tools-dir$|^engine-dir$/ or
                 $arg =~ /^run-id$|^id$|^bench-params$|^tool-params$|^bench-params$|^max-rb-attempts$/ or
                 $arg =~ /^test-order$|^tool-group$|^num-samples$|^max-sample-failures$|^name$|^bench-ids$/ or
                 $arg =~ /^reg-(auth|repo)$/ or
                 $arg =~ /^email$|^desc$/) {
            debug_log(sprintf "argument: [%s]\n", $arg);
            $run{$arg} = $val;
        } elsif ($arg =~ /^tags$/) {
            debug_log(sprintf "argument: [%s]\n", $arg);
            if (! exists($run{'tags'})) {
                $run{'tags'} = [];
            }
            foreach my $this_tag (split(/,/, $val)) {
                if ($this_tag =~ /(\S+):(\S+)/) {
                    my %tag = ('name' => $1, 'val' => $2);
                    push(@{ $run{'tags'} }, \%tag);
                } else {
                    printf "ERROR: format for tag is not valid: %s\n", $this_tag;
                    exit 1;
                }
            }
        } else {
            printf "[ERROR]argument not valid: [%s]\n", $arg;
            usage;
            exit 1;
        }
    }
    # Apply defaults
    foreach my $p (keys %defaults) {
        if (! exists $run{$p}) {
            debug_log(sprintf "applying default value [%s] for %s\n", $defaults{$p}, $p);
            $run{$p} = $defaults{$p};
        }
    }
}

sub validate_controller_env() {
    if (defined $run{'roadblock-dir'} and -e $run{'roadblock-dir'} . "/roadblocker.py") {
        copy($run{'roadblock-dir'} . "/roadblocker.py", $rb_bin);
        chmod 0755, "$rb_bin";
        copy($run{'roadblock-dir'} . "/roadblock.py", $rb_module);
    }
    if (defined $run{'workshop-dir'} and -e $run{'workshop-dir'} . "/workshop.pl") {
        $use_workshop = 1;
        if ( ! exists $run{'reg-repo'} ) {
            die "You must define a container repository (--reg-repo or RS_REG_REPO = \"<fqdn>/<project>/<repo>\") to use rickshaw with workshop"
        }
        if ( ! exists $run{'reg-auth'} ) {
            die "You must define a path to a authorizaton file (--reg-auth or RS_REG_AUTH) to use rickshaw with workshop"
        }
        if (!$run{'reg-repo'} =~ /^(\w+:\/){0,1}([^\/]+\/){0,1}([^\/]+\/){0,1}([^\/]+)$/) {
            die "The --reg-repo or RS_REG_REPO does not match the pattern [protocol:][host[:port]][/<project>]/<repo>: " . $run{'reg-repo'};
        }
        if (! exists $run{'reg-tls-verify'}) {
            $run{'reg-tls-verify'} = "true";
        } elsif ($run{'reg-tls-verify'} ne "true" && $run{'reg-tls-verify'} ne "false") {
            printf "WARNING: Invalid value found for reg-tls-verify, defaulting to 'true'\n";
            $run{'reg-tls-verify'} = "true";
        }
    }
    exists $run{'tools-dir'} || die "[ERROR]You must use " .
                                    "--tools-dir=/path/to/tools/base/subproject-dir " .
                                    "(\$CRUCIBLE_HOME/subprojects/tools)\n";
}

sub assign_bench_ids() {
    foreach my $benchmark_and_id ( split(/,/, $run{'bench-ids'}) ) {
        (my $bench, my $ids) = split(/:/, $benchmark_and_id);
        my @id_ranges = split(/,/, $ids);
        foreach my $id_range (@id_ranges) {
            if ($id_range =~ /^(\d+)\-(\d+)$/) {
                for (my $id = $1; $id <= $2; $id++) {
                    $ids_to_benchmark{$id} = $bench;
                    push(@{ $benchmark_to_ids{$bench} }, $id);
                }
            } elsif ($id_range =~ /^(\d+)$/) {
                push(@{ $benchmark_to_ids{$bench} }, $id_range);
                $ids_to_benchmark{$id_range} = $bench;
            } else {
                printf "ID range or number not recognized: %s\n", $id_range;
            }
        }
    }
}

sub load_bench_params() {
    $run{'iterations'} = ();
    # Load the bench config and user params
    exists $run{'bench-dir'} || die "[ERROR]You must use --bench-dir=/path/to-first/benchmark-subproject[,/path/to-second/benchmark-subproject]\n";
    exists $run{'bench-params'} || die "[ERROR}You must use --bench-params=/path/to-first/benchmark-params.json[,/path/to-second/benchmark-params.json]\n";
    # --benchmark-ids = "uperf:1-2,iperf:3-4"
    my $rc;

    my @params_files = split(/,/, $run{'bench-params'});
    my $count = 0;
    $run{'benchmark'} = "";
    foreach my $this_bench_dir ( split(/,/, $run{'bench-dir'}) ) {
        my $benchmark_name;
        my $bench_config_file = $this_bench_dir . "/rickshaw.json";
        if (-e $bench_config_file) {
            ($rc, my $bench_config_ref) = get_json_file($bench_config_file, $bench_schema_file);
            if ($rc > 0 or ! defined $bench_config_ref) {
                print "Could not open the bench config file\n";
                exit 1;
            }
            if (exists $$bench_config_ref{'benchmark'}) {
                $benchmark_name = $$bench_config_ref{'benchmark'};
                $bench_dirs{$benchmark_name} = $this_bench_dir;
                printf "Preparing to run %s\n", $benchmark_name;
                $run{'benchmark'} .= "," . $benchmark_name;
                $bench_configs{$benchmark_name} = $bench_config_ref;
            } else {
                print "[ERROR]benchmark was not defined in %s\n", $bench_config_file;
                exit 1;
            }
        } else {
            printf "[ERROR]benchmark subproject config file %s was not found\n", $bench_config_file;
            exit 1;
        }

        ($rc, my $param_sets_ref) = get_json_file($params_files[$count], $bench_params_schema_file);
        if ($rc > 0 or ! defined $param_sets_ref) {
            printf "Could not open the bench params file: %s\n", $params_files[$count];
            exit 1;
        }
        my @param_sets = @{ $param_sets_ref };
        # TODO: verify user params schema
        my $iter_id = 0;
        for my $params (@param_sets) {
            if (! exists $run{'iterations'}[$iter_id]{'params'}) {
                $run{'iterations'}[$iter_id]{'params'} = [];
            }
            foreach my $param (@$params) {
                $$param{'benchmark'} = $benchmark_name;
                push(@{ $run{'iterations'}[$iter_id]{'params'} }, $param);
            }
            $iter_id++;
        }
        $count++;
    }
    $run{'benchmark'} =~ s/^,//;

    printf "There are %d benchmark types to run\n", scalar keys %bench_configs;
}

sub load_tool_params() {
    my $rc;
    if (not exists $run{'tool-params'} ) {
        $run{'tool-params'} = $rickshaw_project_dir . "/config/tool-params.json";
    }
    # TODO: need schema for tool-params
    ($rc, my $json_ref) = get_json_file($run{'tool-params'}, $tool_params_schema_file);
    if ($rc > 0 or ! defined $json_ref) {
        print "Could not open the tool params file\n";
        exit 1;
    }
    my @tmp_tools_params = @{ $json_ref };
    foreach my $tool_entry (@tmp_tools_params) {
        if (exists($$tool_entry{'enabled'}) && ($$tool_entry{'enabled'} eq "no")) {
            next;
        }
        push(@tools_params, $tool_entry);
    }
    # Load a tool configuration for every tool the user is asking for
    foreach my $tool_entry (@tools_params) {
        my $tool_name = $$tool_entry{'tool'};
        my $this_tool_config = $run{'tools-dir'} . "/" . $tool_name . "/rickshaw.json";
        my ($rc, $json_ref) = get_json_file($this_tool_config, $tool_schema_file);
        if ($rc > 0 or ! defined $json_ref) {
            printf "Could not open the tool config file: %s\n", $this_tool_config;
            exit 1;
        }
        if (! exists $$json_ref{'tool'} or $$json_ref{'tool'} ne $tool_name) {
            printf "In the following tool config, found in %s, the value for key \"tool\" ", $this_tool_config;
            printf "does not match the tool name, '%s'\n", $tool_name;
            printf "Either correct the tool config, or remove this tool from your test\n";
            my $coder = JSON::XS->new->canonical->pretty;
            printf "%s", $coder->encode($json_ref);
            exit 1;
        }
        $tools_configs{$$json_ref{'tool'}} = $json_ref;
    }
}

sub load_utility_params() {
    my $rc;
    foreach my $utility (@utilities) {
        if (exists $run{$utility . '-dir'}) {
            my $this_utility_config = $run{$utility . '-dir'} . "/rickshaw.json";
            ($rc, my $json_ref) = get_json_file($this_utility_config, $utility_schema_file);
            if ($rc > 0 or ! defined $json_ref) {
                printf "Could not open the utility config file: %s\n", $this_utility_config;
                exit 1;
            }
            if (! exists $$json_ref{'utility'} or $$json_ref{'utility'} ne $utility) {
                printf "In the following utility config, found in %s, the value for key \"utility\" ", $this_utility_config;
                printf "does not match the utility name, '%s'\n", $utility;
                printf "Please correct the utility config\n";
                my $coder = JSON::XS->new->canonical->pretty;
                printf "%s", $coder->encode($json_ref);
                exit 1;
            }
            $utility_configs{$$json_ref{'utility'}} = $json_ref;
        } else {
            printf "Could not determine utility location for '%s'\n", $utility;
            exit 1;
        }
    }
}

sub make_run_dirs() {
    # Ensure the base-run-dir, and tools-dir have absolute paths
    # because they may be referenced by clients and servers later
    for my $dirtype (qw(base-run-dir tools-dir)) {
        {
            my $pushd_dir = pushd($run{$dirtype});
            debug_log(sprintf "pushd to [%s]\n", $run{$dirtype});
            my $cwd = getcwd();
            debug_log(sprintf "cwd [%s]\n", $cwd);
            $run{$dirtype} = $cwd;
        }
    }
    -e $run{'base-run-dir'} || mkdir($run{'base-run-dir'});
    debug_log(sprintf("Base run directory: [%s]\n", $run{'base-run-dir'}));
    debug_log(sprintf("Bench helper subproject directory: [%s]\n", $run{'bench-dir'}));
    $config_dir = $run{'base-run-dir'} . "/config";
    mkdir($config_dir);
    $engine_config_dir = $config_dir . "/engine";
    mkdir($engine_config_dir);
    $engine_bench_cmds_dir = $engine_config_dir . "/bench-cmds";
    mkdir($engine_bench_cmds_dir);
    $tool_cmds_dir = $config_dir . "/tool-cmds";
    mkdir($tool_cmds_dir);
    $run_dir = $run{'base-run-dir'} . "/run";
    mkdir($run_dir);
    $base_endpoint_run_dir = $run_dir . "/endpoint/";
    mkdir($base_endpoint_run_dir);
    $engine_run_dir = $run_dir . "/engine/";
    mkdir($engine_run_dir);
    $engine_logs_dir = $engine_run_dir . "/logs/";
    mkdir($engine_logs_dir);
    $engine_archives_dir = $engine_run_dir . "/archives/";
    mkdir($engine_archives_dir);
    $engine_run_script = $engine_config_dir . "/engine-script";
    $engine_library_script = $engine_config_dir . "/engine-script-library";
    $engine_roadblock_script = $engine_config_dir . "/roadblocker.py";
    $engine_roadblock_module = $engine_config_dir . "/roadblock.py";
    $iterations_dir = $run_dir . "/iterations";
    mkdir($iterations_dir);
    $roadblock_msgs_dir = $run_dir . "/roadblock-msgs";
    mkdir($roadblock_msgs_dir);
    # If there are no endpoints, assume 1 endpoint using the 'local' extension
    if (scalar @endpoints == 0) {
        printf "ERROR: you must declare endpoints\n";
        exit 1;
    }
}

sub load_settings_info() {
    (my $rc, $jsonsettings) = load_json_settings($rickshaw_project_dir . "/rickshaw-settings.json");
    if ($rc != 0) {
        print "load_settings_info(): load_json_settings() failed\n";
        exit 1;
    }

    ($rc, $default_rb_timeout) = get_json_setting("roadblock.timeouts.default", $jsonsettings);
    if ($rc != 0) {
        print "load_settings_info(): failed to load default roadblock timeout\n";
        exit 1;
    }

    ($rc, $endpoint_deploy_timeout) = get_json_setting("roadblock.timeouts.endpoint-deploy", $jsonsettings);
    if ($rc != 0) {
        print "load_settings_info(): failed to load endpoint-deploy roadblock timeout\n";
        exit 1;
    }

    ($rc, $collect_sysinfo_timeout) = get_json_setting("roadblock.timeouts.collect-sysinfo", $jsonsettings);
    if ($rc != 0) {
        print "load_settings_info(): failed to load collect-sysinfo roadblock timeout\n";
        exit 1;
    }

    ($rc, $engine_script_start_timeout) = get_json_setting("roadblock.timeouts.engine-start", $jsonsettings);
    if ($rc != 0) {
        print "load_settings_info(): failed to load engine-start roadblock timeout\n";
        exit 1;
    }

    ($rc, $endpoint_move_data_rb_timeout) = get_json_setting("roadblock.timeouts.move-data", $jsonsettings);
    if ($rc != 0 ) {
        print "load_settings_info(): failed to load move-data roadblock timeout\n";
        exit 1;
    }

    ($rc, $workshop_force_builds) = get_json_setting("workshop.force-builds", $jsonsettings);
    if ($rc != 0) {
        print "load_settings_info(): failed to load workshop force\n";
        exit 1;
    }
    printf "Finished loading json settings\n";
}

sub save_config_info() {
    if (put_json_file($config_dir . "/rickshaw-run.json", \%run) > 0) {
        printf "save_config_info(): put_json_file() failed for %s\n", $config_dir . "/rickshaw-run.json";
        exit 1;
    }

    if (put_json_file($config_dir . "/rickshaw-settings.json", $jsonsettings) > 0) {
        printf "save_config_info(): put_json_file() failed for %s\n", $config_dir . "/rickshaw-settings.json";
        exit 1;
    }
    printf "Finished saving json settings to %s\n", $config_dir . "/rickshaw-run.json";
}

sub validate_endpoints() {
    # Call each endpoint script with "--validate" as the first option, and each endpoint script should
    # return a list of clients and servers which are used from this endpoint.  Collect this output
    # and verify there are no gaps in the numbering of clients, and if the benchmark uses servers,
    # that there is 1 server for every client.
    # Why can't we just parse the endpoint option?  Because there is no gaurantee that the endpoint
    # option always contains the client and server IDs that will be used.  For example, an endpoint
    # for k8s might look like: "--endpoint:[1-5]" where client and server are not required, and when
    # not used, this endpoint assumes both clients and servers (for IDs 1-5) will be deployed. 
    # This ensures the format of the specific endpoint option string is completely up to that endpoint
    # and not rickshaw.
    my $min_id;
    my $max_id;
    my $collectors_present = 0;
    printf "Confirming the endpoints will satisfy the benchmark requirements:\n";

    # Process all endpoint --validate outputs to get ID range for client and server
    foreach my $endpoint (@endpoints) {
        my $pushd_dir = pushd($rickshaw_project_dir . "/endpoints/" . $$endpoint{'type'});
        my $cmd = "./" . $$endpoint{'type'} .
                " --endpoint-label=" . $$endpoint{'label'} .
                " --base-run-dir=" . $run{'base-run-dir'} .
                " --endpoint-opts=" . $$endpoint{'opts'} .
                " --validate";
        debug_log(sprintf "endopoint validation command: [%s]\n", $cmd);
        ($cmd, my $output, my $cmd_rc) = run_cmd($cmd);
        debug_log(sprintf "\n[$output]\n");
        my @output = grep(!/^#/, split(/\n/, $output));
        if ($cmd_rc > 0) {
            die "[ERROR]Endpoint " . $$endpoint{'type'} . " with options " . $$endpoint{'opts'} .
                " validation returned non-zero exit code:\n" . join("\n", @output) . "\n";
        }
        # Output from endpoint's validation should be 1 or more lines with "client" or "server"
        # followed by 1 or more positive integers representing the client/server IDs this
        # endpoint handles::
        # client <int> [int]
        # server <int> [int]
        foreach my $line (@output) {
            chomp $line;
            if ($line =~ /(client|server|profiler)\s+(.+)$/) {
                my $engine = $1;
                my $ids = $2;
                foreach my $id (split(/\s+/, $ids)) {
                    die "[ERROR]client/server ID cannot be below 1\n" if ($id < 1);
                    my %info = ( 'endpoint-type' => $$endpoint{'type'}, 'id' => $id );
                    $clients_servers{$engine}[$id - 1] = \%info;
                    push(@rb_cs_ids, $engine . "-" . $id);
                    if ($engine =~ /(client|server)/) {
                        $min_id = $id if (! defined $min_id or $id < $min_id);
                        $max_id = $id if (! defined $max_id or $id > $max_id);
                    }
                    if ($engine =~ /(collector)/) {
                        $collectors_present++;
                    }
                }
            } elsif ($line =~ /(userenv)\s+(.+)$/) {
                $$endpoint{'userenv'} = $2;
                debug_log(sprintf("Clients/servers for endpoint %s will have userenv %s\n",
                    $$endpoint{'label'}, $$endpoint{'userenv'}));
                foreach my $bench (keys %bench_configs) {
                    my %userenv_info = ( 'image' => '' );
                    $image_ids{$bench}{$$endpoint{'userenv'}} = \%userenv_info;
                }
            } else {
                printf "[ERROR]output from endpoint validation incorrect:\n%s\n", $line;
                exit 1;
            }
        }
    }
    if (! defined $min_id || ! defined $max_id) {
        print "[ERROR] Could not determine number of clients and/or server engines to create!  Did you specify at least 'client:N' in your endpoint arguments?\n";
        exit 1;
    }
    if ($min_id != 1) {
        printf "[ERROR]lowest ID found in clients and servers is %d, must be 1\n", $min_id;
        exit 1;
    }


    print "Number of benchmarks: " . scalar(keys(%bench_configs)) . "\n";
    if (scalar keys %bench_configs == 1) {
        # There us only one benchmark type used, and there may not be a --benchmark-ids provided,
        # so we need to match clients to servers here.
        my @benchmarks = keys %bench_configs;
        my $this_benchmark = $benchmarks[0];

        my $server_required = 0;
        if (exists $bench_configs{$this_benchmark}{'server'}) {
            debug_log("server is present\n");
            $server_required = 1;
            if (exists $bench_configs{$this_benchmark}{'server'}{'required'} && ! $bench_configs{$this_benchmark}{'server'}{'required'}) {
                debug_log("server is present but not required\n");
                $server_required = 0;
            } elsif (! exists $bench_configs{$this_benchmark}{'server'}{'required'}) {
                $bench_configs{$this_benchmark}{'server'}{'required'} = 1;
            }
        }
        my $servers_present = 0;
        my $clients_present = 0;
        for (my $id = $min_id; $id <= $max_id; $id++) {
            debug_log(sprintf "checking for client ID %d\n", $id);
            # Only check for matching clients if we have 1:1 assignment.
            # 1:N can have as many servers with just 1 client
            if (defined $clients_servers{'client'}[$id - 1]) {
                $clients_present++;
            } elsif (exists $bench_configs{$this_benchmark}{'client'}{'client-server-ratio'} and $bench_configs{$this_benchmark}{'client'}{'client-server-ratio'} eq "1:N") {
                debug_log(sprintf "Did not find same client ID for server ID %d, but client-server-ratio is 1:N\n", $id);
            } else {
                printf "[ERROR]client ID %d is not defined in ID range %d - %d\n", $id, $min_id, $max_id;
                exit 1;
            }
            if (exists $bench_configs{$this_benchmark}{'server'}) {
                debug_log(sprintf "checking for server ID %d\n", $id);
                if (! defined $clients_servers{'server'}[$id - 1]) {
                    if ($server_required) {
                        printf "[ERROR]server ID %d is not defined in ID range %d - %d\n",
                            $id, $min_id, $max_id;
                        exit 1;
                    } else {
                        debug_log(sprintf "server ID %d missing but not required\n", $id);
                    }
                } else {
                    $servers_present++;
                }
            } else {
                debug_log(sprintf "checking for no server IDs\n");
                if (defined $clients_servers{'server'}[$id - 1]) {
                    printf "[ERROR]server ID %d is defined in ID range %d - %d, but this benchmark " .
                        "does not use servers\n", $id, $min_id, $max_id;
                    exit 1;
                }
            }
        }
        printf "There will be %d client(s)", $clients_present;
        printf " and %d server(s)", $servers_present if exists $bench_configs{$this_benchmark}{'server'} && $servers_present;
        printf " and %d collector(s)", $collectors_present if $collectors_present;
        printf "\n";
        # --bench-ids is not used/needed when only 1 benchmark is used, so we need to populate it now
        # with what was discovered with endpoint validation
        $run{'bench-ids'} = $this_benchmark . ":" . $min_id . "-" . $max_id;
        assign_bench_ids();
    } else { # >1 benchmark types
        # Assumes --bench-ids is already defined by user, which is required
        # when multi-benchmarks are used.
        assign_bench_ids();
        printf "Check for multi-benchmark IDs here\n";
    }

    $endpoint_roadblock_opt = " --roadblock-id=" . $run{'id'} .
        " --roadblock-passwd=" . $redis_passwd;
    $workshop_roadblock_opt = " --requirements " . $run{'roadblock-dir'} .
        "/workshop.json ";
    $run{'endpoints'} = \@endpoints;
    print "Endpoints validated\n";
}

sub build_test_order() {
    printf "Building test execution order\n";
    # Build test execution order (and the iteration/sample dirs)
    if ($run{'test-order'} eq 's') {
        for (my $iid = 1; $iid <= scalar @{ $run{'iterations'} }; $iid++) {
            for (my $sid = 1; $sid <= $run{'num-samples'}; $sid++) {
                my %test = ('iteration-id' => $iid, 'sample-id' => $sid);
                push(@tests, \%test);
            }
        }
    } elsif ($run{'test-order'} eq 'i') {
        for (my $sid = 1; $sid <= $run{'num-samples'}; $sid++) {
            for (my $iid = 1; $iid <= scalar @{ $run{'iterations'} }; $iid++) {
                my %test = ('iteration-id' => $iid, 'sample-id' => $sid);
                push(@tests, \%test);
            }
        }
    } elsif ($run{'test-order'} eq 'r') {
        my $total_samples = scalar( @{$run{'iterations'} }) * $run{'num-samples'};
        my @available_tests;
        for (my $iid = 1; $iid <= scalar @{ $run{'iterations'} }; $iid++) {
            my %test = ('iteration-id' => $iid);
            $test{'samples'} = [];
            for (my $sid = 1; $sid <= $run{'num-samples'}; $sid++) {
                push(@{ $test{'samples'} }, $sid);
            }
            push(@available_tests, \%test);
        }
        while(scalar(@available_tests)) {
            my $random_iteration = int(rand(scalar(@available_tests)));
            my %test = ('iteration-id' => $available_tests[$random_iteration]{'iteration-id'},
                        'sample-id' => shift( @{ $available_tests[$random_iteration]{'samples'} } ));
            push(@tests, \%test);
            if (scalar( @{ $available_tests[$random_iteration]{'samples'} } ) == 0) {
                splice @available_tests, $random_iteration, 1;
            }
        }
        if (scalar(@tests) != $total_samples) {
            printf "[ERROR]Expected %d tests but found %d --> is the random test-order algorithm broken?\n", $total_samples, scalar(@tests);
            exit 1;
        }
    } else {
        printf "[ERROR]Value for --test-order [%s] is not valid\n", $run{'test-order'};
        usage;
        exit 1;
    }
    if (put_json_file($config_dir . "/test-order.json", \@tests) > 0) {
        printf "build_test_order(): put_json_file() failed for %s\n", $config_dir . "/test-order.json";
    }
}

sub build_tool_cmd {
    my $tool_entry = shift;
    my $start_stop = shift;
    my $fh = shift;
    my $endpoint_type = shift;
    my $tool_name = $$tool_entry{'tool'};
    # Assemble the arguments as a bash array in order to not get them scrambled later
    my $tool_cmd = $tool_name . ':declare -a ARGS=(';
    foreach my $tool_param (@{ $$tool_entry{'params'} }) {
        if (exists($$tool_param{'enabled'}) && ($$tool_param{'enabled'} eq "no")) {
            next;
        }
        $tool_cmd .= "'--" . $$tool_param{'arg'} . "' '" . $$tool_param{'val'} . "' ";
    }
    $tool_cmd =~ s/\s$//;
    $tool_cmd .= ") && ";
    $tool_cmd .= $tools_configs{$tool_name}{'collector'}{$start_stop} . ' "${ARGS[@]}"';
    # Check if the engine is deployed by an endpoint that blacklists this tool
    if (exists $tools_configs{$tool_name}{'collector'}{'blacklist'}) {
        for my $i (@{ $tools_configs{$tool_name}{'collector'}{'blacklist'} }) {
            if (defined $endpoint_type and $endpoint_type eq $$i{'endpoint'}) {
                # If it is, don't let this client/server run this tool
                undef $tool_cmd;
            }
        }
    }
    if (defined $tool_cmd) {
        printf $fh "%s\n", $tool_cmd;
    }
}

sub build_files_list {
    my $cs_type = shift;
    my $cs_id = shift;
    my $benchmark = shift;
    my $cs_file_list;

    if (defined $cs_id) {
        $cs_file_list = $engine_config_dir . "/" . $cs_type . "-" . $cs_id . "-files-list";
    } else {
        $cs_file_list = $engine_config_dir . "/" . $cs_type . "-files-list";
    }

    open(FH, ">" . $cs_file_list) || die "[ERROR]could not open " . $cs_file_list . " for writing";
    if ($cs_type =~ /(client|server)/ and defined $benchmark and exists $bench_configs{$benchmark}{$cs_type}{"files-from-controller"}) {
        my $bench_dir = $bench_dirs{$benchmark};
        for my $file_spec (@{ $bench_configs{$benchmark}{$cs_type}{"files-from-controller"} } ) {
            if (! exists $$file_spec{'required'}) {
                $$file_spec{'required'} = 1;
            }
            my $src_file = $$file_spec{'src'};
            $src_file =~ s/\%bench-dir\%/$bench_dirs{$benchmark}\//g;
            $src_file =~ s/\%run-dir\%/$run_dir\//g;
            $src_file =~ s/\%config-dir\%/$config_dir\//g;
            my $dest_file = $$file_spec{'dest'};
            if (-e $src_file) {
                debug_log(sprintf("adding  %s for engine type '%s'", $src_file, $cs_type));
                printf FH "src=%s\ndest=%s\n", $src_file, $dest_file;
            } elsif (! $$file_spec{'required'}) {
                debug_log(sprintf("skipping %s because it does not exist and is not required for engine type '%s'", $src_file, $cs_type));
            } else {
                die "[ERROR]Could not find required file " . $src_file . " for engine type '" . $cs_type. "'\n";
            }
        }
    }
    foreach my $tool_entry (@tools_params) {
        my $tool_name = $$tool_entry{'tool'};
        if (exists $tools_configs{$tool_name}{'collector'}{'files-from-controller'}) {
            for my $file_spec (@{ $tools_configs{$tool_name}{'collector'}{"files-from-controller"} } ) {
                my $src_file = $$file_spec{'src'};
                $src_file =~ s/\%tool-dir\%/$run{'tools-dir'}\/$$tool_entry{'tool'}\//g;
                $src_file =~ s/\%run-dir\%/$run_dir\//g;
                $src_file =~ s/\%config-dir\%/$config_dir\//g;
                my $dest_file = $$file_spec{'dest'};
                if (-e $src_file) {
                    debug_log(sprintf("adding %s for tool '%s'", $src_file, $tool_name));
                    printf FH "src=%s\ndest=%s\n", $src_file, $dest_file;
                } elsif (! $$file_spec{'required'}) {
                    debug_log(sprintf("skipping %s because it does not exist and is not required for tool '%s'", $src_file, $tool_name));
                } else {
                    die "[ERROR]Could not find required file " . $src_file . " for tool '" . $tool_name . "'\n";
                }
            }
        }
    }
    foreach my $utility (@utilities) {
        my $utility_dir = $run{$utility . '-dir'};
        if (exists $utility_configs{$utility}{'engine'}{'files-from-controller'}) {
            for my $file_spec (@{ $utility_configs{$utility}{'engine'}{'files-from-controller'} }) {
                my $src_file = $$file_spec{'src'};
                $src_file =~ s/\%utility-dir\%/$utility_dir/g;
                my $dest_file = $$file_spec{'dest'};
                if (-e $src_file) {
                    debug_log(sprintf("adding %s for utility '%s'", $src_file, $utility));
                    printf FH "src=%s\ndest=%s\n", $src_file, $dest_file;
                } elsif (! $$file_spec{'required'}) {
                    debug_log(sprintf("skipping %s because it does not exist and is not required for utility '%s'", $src_file, $utility));
                } else {
                    die "[ERROR]Could not find required file " . $src_file . " for utility '" . $utility . "'\n";
                }
            }
        }
    }
    close FH;
}

sub prepare_bench_tool_engines() {
    # Run on the controller (the host running this script) the benchmark-specific "pre-script"
    foreach my $this_benchmark (keys %bench_configs) {
        if (exists $bench_configs{$this_benchmark}{"controller"}{"pre-script"} and $bench_configs{$this_benchmark}{"controller"}{"pre-script"} ne "") {
            my $pushd_dir = pushd($run_dir);
            # Note that the user params for the benchmark are from the first set only
            # This pre-script is run only once before all of the tests are started.
            # If this script generates a file to aid in benchmark execution (such as a job file),
            # The file should work for all peram sets (all benchmark iterations).  If you need
            # different job files per iteration, then use the client or server-side "pre-script"
            # to either augment a file generated here or create a completely new file.
            # NOTE: for multi-bench, this will require some new logic.  One may have a benchmark
            # which uses a pre-script but does not use ID 1.  Instead we will need to run from the 
            # first ID for that benchmark.
            printf "generating pre-script cmd\n";
            my $cmd = $bench_configs{$this_benchmark}{"controller"}{"pre-script"} . " " . dump_params($run{'iterations'}[0]{'params'}, 1, "client");
            $cmd =~ s/\%bench-dir\%/$bench_dirs{$this_benchmark}/g;
            $cmd =~ s/\%run-dir\%/$run_dir/g;
            debug_log(sprintf "controller pre-script command: [%s]\n", $cmd);
            ($cmd, my $pre_cmd_output, my $cmd_rc) = run_cmd($cmd);
            if ($cmd_rc != 0) {
                printf "controller pre-script failed with return code = %d\n", $cmd_rc;
                printf "controller pre-script command: %s\n", $cmd;
                printf "controller pre-script output:\n%s", join("\n", $pre_cmd_output);
                exit $cmd_rc;
            }
            debug_log(sprintf "controller pre-script output:\n%s", join("\n", $pre_cmd_output));
        }
    }
    copy($rickshaw_project_dir . "/engine/engine-script", $engine_run_script)
        || die "Could not copy engine-script to " . $engine_run_script;
    chmod 0755, "$engine_run_script";
    copy($rickshaw_project_dir . "/engine/engine-script-library", $engine_library_script)
        || die "Could not copy engine-script-library to " . $engine_library_script;
    chmod 0755, "$engine_library_script";
    copy($run{'roadblock-dir'} . "/roadblocker.py", $engine_roadblock_script)
        || die "Could not copy roadblocker.py to " . $engine_roadblock_script;
    chmod 0755, "$engine_roadblock_script";
    copy($run{'roadblock-dir'} . "/roadblock.py", $engine_roadblock_module)
        || die "Could not copy roadblock.py to " . $engine_roadblock_module;

    my @collectors = grep(/[^client|^server]/, keys %clients_servers);
    my @all_collector_types = qw(client server worker master profiler compute);

    # Each tool may specify, for specific endpoints, that it needs to run somewhere other than a client
    # or server (a "collector").  This preference is in the "whitelist" section.  Check each tool used
    # to see if we need to build a command file for any of these collectors.
    my %collector_tools;
    foreach my $tool_entry (@tools_params) {
        my $tool_name = $$tool_entry{'tool'};
        if (exists $tools_configs{$tool_name}{'collector'}{'whitelist'}) {
            for my $i (@{ $tools_configs{$tool_name}{'collector'}{'whitelist'} }) {
                my $endpoint = $$i{'endpoint'};
                # Does this endpoint in tool config match one of th endpoints used for this run?
                if (grep(/^$endpoint$/, dump_endpoint_types(\@endpoints))) {
                    # Then add this tool to the list of tools for this collector
                    for my $collector (@{ $$i{'collector-types'} }) {
                        if (! exists($collector_tools{$collector})) {
                            $collector_tools{$collector} = ();
                        }
                        debug_log("Adding " . $tool_name . " to " . $collector . "\n");
                        push(@{ $collector_tools{$collector} }, $tool_name);
                    }
                }
            }
        }
    }
    # Now build all of the tool start and stop cmd files for each collector
    for my $collector (@all_collector_types) {
        for my $start_stop ("start", "stop") {
            my $collector_tool_cmds_dir = $tool_cmds_dir . "/" . $collector;
            -e $collector_tool_cmds_dir || make_path($collector_tool_cmds_dir) ||
                die "[ERROR]Create collector directory failed: [" . $collector_tool_cmds_dir . "]\n";
            my $tool_cmd_file = $collector_tool_cmds_dir . "/" . $start_stop; 
            my $tool_count = 0;
            open(my $fh, ">" . $tool_cmd_file) ||
                die "[ERROR]could not open cmd file for writing: [" . $tool_cmd_file . "]\n";
            debug_log(sprintf "writing tool-cmds [%s]\n", $tool_cmd_file);
            foreach my $tool_entry (@tools_params) {
                my $tool_name = $$tool_entry{'tool'};
                debug_log(sprintf "tool_name: [%s]\n", $tool_name);
                for my $i (@{ $tools_configs{$tool_name}{'collector'}{'whitelist'} }) {
                    debug_log(sprintf "endpoint: [%s]\n", $$i{'endpoint'});
                    if (grep(/^$collector$/, @{ $$i{'collector-types'} })) {
                        debug_log(sprintf "building tool cmd for [%s]\n", $tool_name);
                        build_tool_cmd($tool_entry, $start_stop, $fh);
                        $tool_count++;
                    } else {
                        debug_log(sprintf "collector [%s] was not found in collector-types: [%s]\n", $collector, join(" ", @{ $$i{'collector-types'} }));
                    }
                }
            }
            close($fh);
            chmod 0755, $tool_cmd_file;
        }
    }
    # By default all tools run on client and servers.  However,
    # in some cases tools should not be run in the client or server, either
    # because there is nothing to collect in that runtime, or the tool is
    # already collecting that data from a different source (and a client
    # and/or server would be collecting duplicate data).  For this reason tool
    # cmd files are built specifically for each client and server.
    print "Generating tool cmds\n";
    foreach my $cs_type (keys %clients_servers) {
        next if ($cs_type eq "profiler"); # Currently we do not generate specific tools cmds for each profiler
        for my $start_stop ("start", "stop") {
            foreach my $cs_ref (@{ $clients_servers{$cs_type} }) {
		if (! defined $$cs_ref{'id'}) {
			printf "cs_ref{'id'} for client_servers{%s} is not defined, skipping.\n", $cs_type;
			next;
		}
                my $cs_tool_cmds_dir = $tool_cmds_dir . "/" . $cs_type . "/" . $$cs_ref{'id'};
                make_path($cs_tool_cmds_dir);
                my $tool_cmd_file = $cs_tool_cmds_dir . "/" . $start_stop;
                open(my $fh, ">" . $tool_cmd_file) ||
                    die "[ERROR]could not open cmd file for writing: [" . $tool_cmd_file . "]\n";
                debug_log(sprintf "writing tool-cmds [%s]\n", $tool_cmd_file);
                foreach my $tool_entry (@tools_params) {
                    build_tool_cmd($tool_entry, $start_stop, $fh, $$cs_ref{'endpoint-type'});
                }
                close($fh);
                chmod 0755, $tool_cmd_file;
            }
        }
    }
    # Build the client and server bench-cmd files
    # Each benchmark has to define the commands used in their rickshaw.json
    debug_log(sprintf "clients_servers: [%s]\n", join(" ", keys %clients_servers));
    foreach my $cs_type (keys %clients_servers) {
        next if ($cs_type eq "profiler"); # This does not use bench-cmds
        foreach my $cs_ref (@{ $clients_servers{$cs_type} }) {
            my @cmd_type_files = ("start");
            if ($cs_type eq "server") {
                push(@cmd_type_files, "stop");
            }
            if ($cs_type eq "client") {
                push(@cmd_type_files, "runtime");
            }
            if ($cs_type eq "client") {
                push(@cmd_type_files, "infra");
            }
	    if (! defined $$cs_ref{'id'}) {
		printf "cs_type: [%s] cs_ref{'id'} not defined, skipping\n", $cs_type;
                next;
	    }
            my $cs_id = $$cs_ref{'id'};
            my $this_cmds_dir = $engine_bench_cmds_dir . "/" . $cs_type . "/" . $cs_id;
            #make_path($this_cmds_dir) || die "Could not mkdir " . $this_cmds_dir;
            make_path($this_cmds_dir);
            foreach my $cmd_type (@cmd_type_files) {
                next if ($cmd_type eq "runtime" and $cs_id > 1); # runtime cmds only for client-1
                my $this_cmd_file = $this_cmds_dir . "/" . $cmd_type;
                open(FH, ">" . $this_cmd_file) ||
                    die "[ERROR]Open bench-cmds file for writing failed: [" . $this_cmd_file . "]\n";
                debug_log(sprintf "writing bench-cmds [%s]\n", $this_cmd_file);
                foreach my $test_ref (@tests) {
                    my $test_iter = $$test_ref{'iteration-id'};
                    my $test_samp = $$test_ref{'sample-id'};
                    my $iter_array_idx = $test_iter - 1;
                    my $benchmark = $ids_to_benchmark{$cs_id};
                    if (exists $bench_configs{$benchmark}{$cs_type}{$cmd_type} and
                        $bench_configs{$benchmark}{$cs_type}{$cmd_type} ne "") {
                        my $cmd = $bench_configs{$benchmark}{$cs_type}{$cmd_type} . " " .
                                dump_params($run{'iterations'}[$iter_array_idx]{'params'}, $cs_id, $cs_type);
                        debug_log(sprintf "cmd: [%s]\n", $cmd);
                        # Apply a regex from the benchmark config file to the command
                        # This is used to remove things like "--clients=" because the
                        # native benchmark does not understand this parameter
                        if ($bench_configs{$benchmark}{$cs_type} and $bench_configs{$benchmark}{$cs_type}{"param_regex"}) {
                            for my $r (@{ $bench_configs{$benchmark}{$cs_type}{"param_regex"} }) {
                                # to apply the 's/x/y/' regex from the file, some eval trickery is necessary
                                # todo: first test the $r regex separately for [perl syntax] errors with eval
                                # before doing below
                                $cmd = eval "\$_='$cmd'; $r; return scalar \$_";
                            }
                        }
                        printf FH "%d-%d %s\n", $test_iter, $test_samp, $cmd;
                    } else {
                        # infra command is optional
                        if ($cmd_type ne "infra") {
                            die "[ERROR]Could not find " . $cmd_type . " in bench_config\n";
                        }
                    }
                }
                close FH;
                chmod 0755, $this_cmd_file;
            }
        }
    }
    # Build the client/server "from-controller" files list and put them in the base endpoint run dir.
    # These are files the client/server must copy from the controller before running any tests.
    # The "engine-script" will first scp the list (client-files-list or server-files-list).
    # then it will read this list to know what other files to copy over)
    foreach my $cs_type (keys %clients_servers, @all_collector_types) {
        if ($cs_type =~ /^client|server|profiler?/) {
            foreach my $cs_ref (@{ $clients_servers{$cs_type} }) {
	        if (! defined $$cs_ref{'id'}) {
		    printf "cs_type: [%s] cs_ref{'id'} not defined, skipping\n", $cs_type;
                    next;
	        }
                my $cs_id = $$cs_ref{'id'};
                my $benchmark = $ids_to_benchmark{$cs_id};
                build_files_list($cs_type, $cs_id, $benchmark);
            }
        } else {
            build_files_list($cs_type);
        }
    }
}

sub add_ssh_keys() {
    # Create temporary ssh keys so endpoint clients/servers can pull/push data
    my $keygen_cmd = 'ssh-keygen -f ' . $config_dir . '/rickshaw_id.rsa -P "" 2>&1';
    ($keygen_cmd, my $keygen_output, my $keygen_cmd_rc) = run_cmd($keygen_cmd);
    system('cat ' . $config_dir . '/rickshaw_id.rsa.pub >>/root/.ssh/authorized_keys');
}

sub deploy_endpoints() {
    # Deploy ths endpoints so they are ready to run benchmark and tools.
    # Each endpoint is responible for launching a osruntime for each client and server.
    print "\nDeploying endpoints\n";
    $endpoint_deploy_timeout += scalar @endpoints * 120;
    foreach my $engine (keys %clients_servers) {
        $endpoint_deploy_timeout += scalar @{ $clients_servers{$engine} } * 15;
        $engine_script_start_timeout += scalar @{ $clients_servers{$engine} } * 15;
    }
    printf "endpoint-deploy-timeout adjusted to %d seconds\n", $endpoint_deploy_timeout;
    printf "engine-script-timeout adjusted to %d seconds\n", $endpoint_deploy_timeout;
    debug_log(sprintf "\nendpoint output:\n");
    for (my $i = 0; $i < scalar @endpoints; $i++) {
        my $type = $endpoints[$i]{'type'};
        my $opts = $endpoints[$i]{'opts'};
        my $label = $endpoints[$i]{'label'};
        my $userenv = $endpoints[$i]{'userenv'};
        my $endpoint_image_opt = "";
        my $bench_ids_opt = "";
        if (defined $endpoints[$i]{'userenv'}) {
            foreach my $bench (keys %bench_configs) {
                $endpoint_image_opt .= "," . $bench . "::" . $image_ids{$bench}{$endpoints[$i]{'userenv'}}{'image'};
            }
            $endpoint_image_opt =~ s/^,/ --image=/;
        }
        if (defined $run{'bench-ids'}) {
            $bench_ids_opt = " --bench-ids=$run{'bench-ids'}";
        }
        my $this_endpoint_run_dir = $base_endpoint_run_dir . "/" . $label;
        mkdir($this_endpoint_run_dir);
        die "Could not create $this_endpoint_run_dir" if ! -e $this_endpoint_run_dir;
        my $endpoint_project_dir = $rickshaw_project_dir . "/endpoints/" . $type;
        if (-e $endpoint_project_dir) {
            my $pushd_dir = pushd($endpoint_project_dir);
            my $cmd = "./" . $type .
                    " --packrat-dir=" . $run{'packrat-dir'} .
                    " --endpoint-opts=" . $opts .
                    " --endpoint-label=" . $label .
                    " --run-id=" . $run{'id'} .
                    " --base-run-dir=" . $run{'base-run-dir'} .
                    " --max-sample-failures=" . $run{'max-sample-failures'} .
                    " --max-rb-attempts=" . $run{'max-rb-attempts'} .
                    " --endpoint-deploy-timeout=" . $endpoint_deploy_timeout .
                    " --engine-script-start-timeout=" . $engine_script_start_timeout .
                    $endpoint_image_opt .
                    $bench_ids_opt .
                    $endpoint_roadblock_opt .
                    " >" . $this_endpoint_run_dir . "/endpoint-stderrout.txt 2>&1";
            # The below 'system' needs to be forked, then wait for all to finish.
            # The endpoint program should get all clients/servers "ready", that is,
            # waiting for instructions from roadblock.  The above command needs
            # info about how to contact roadblock.
            # Endpoints should return for each client and server started:
            # - the ID of the client/server
            # - the roadblock client ID
            debug_log(sprintf "Going to run endpoint command:\n%s\n\n", $cmd);
            if ($endpoint_roadblock_opt eq "") {
                # There is only one client and no synchronization, so we wait for the endpoint to finish
                debug_log(sprintf "going to run and wait for: %s\n", $cmd);
                #system($cmd);
            } else {
                #debug_log(sprintf "going to run %s\n", $cmd);
                system($cmd . " &");
            }
        } else {
            printf "[ERROR]could not find endpoint ./endpoints/%s\n", $type;
            exit 1;
        }
    }
}

sub process_roadblocks() {
    my $roadblock_rc;
    my @new_followers;
    my @dropped_followers;

    @active_followers = (dump_endpoint_labels(\@endpoints));

    ####################################################################
    $roadblock_rc = do_roadblock("endpoint-deploy-begin", $endpoint_deploy_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    if (defined $messages_ref) {
        foreach my $msg (@{ $$messages_ref{'received'} })  {
            if (exists $$msg{'payload'}{'message'}{'user-object'}{'new-followers'}) {
                @new_followers = @{ $$msg{'payload'}{'message'}{'user-object'}{'new-followers'} };
                printf "Endpoint created followers: %s\n", join(" ", sort(@new_followers));
                last;
            }
        }
    }

    $roadblock_rc = do_roadblock("endpoint-deploy-end", $endpoint_deploy_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    push @active_followers, @new_followers, @rb_cs_ids;
    ####################################################################
    $roadblock_rc = do_roadblock("engine-init-begin", $engine_script_start_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    $roadblock_rc = do_roadblock("engine-init-end", $engine_script_start_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);
    ####################################################################
    $roadblock_rc = do_roadblock("get-data-begin", $default_rb_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    $roadblock_rc = do_roadblock("get-data-end", $default_rb_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);
    ####################################################################
    make_path($run_dir . "/sysinfo/endpoint");

    $roadblock_rc = do_roadblock("collect-sysinfo-begin", $collect_sysinfo_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    $roadblock_rc = do_roadblock("collect-sysinfo-end", $collect_sysinfo_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);
    ####################################################################
    $roadblock_rc = do_roadblock("start-tools-begin", $default_rb_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);

    $roadblock_rc = do_roadblock("start-tools-end", $default_rb_timeout, $messages_ref, @active_followers);
    roadblock_exit_on_error($roadblock_rc);
    ####################################################################
    process_bench_roadblocks;
    ####################################################################
    ($roadblock_rc, @dropped_followers) = do_roadblock("stop-tools-begin", $default_rb_timeout, $messages_ref, @active_followers);
    remove_dropped_followers(\@active_followers, \@dropped_followers);

    ($roadblock_rc, @dropped_followers) = do_roadblock("stop-tools-end", $default_rb_timeout, $messages_ref, @active_followers);
    remove_dropped_followers(\@active_followers, \@dropped_followers);
    ####################################################################
    ($roadblock_rc, @dropped_followers) = do_roadblock("send-data-begin", $default_rb_timeout, $messages_ref, @active_followers);
    remove_dropped_followers(\@active_followers, \@dropped_followers);

    ($roadblock_rc, @dropped_followers) = do_roadblock("send-data-end", $default_rb_timeout, $messages_ref, @active_followers);
    remove_dropped_followers(\@active_followers, \@dropped_followers);
    ####################################################################
    # we always drop the engines here since they should have exited
    remove_engine_followers(\@active_followers, \@new_followers);
    remove_engine_followers(\@active_followers, \@rb_cs_ids);

    ($roadblock_rc, @dropped_followers) = do_roadblock("endpoint-cleanup-begin", $default_rb_timeout, $messages_ref, @active_followers);
    remove_dropped_followers(\@active_followers, \@dropped_followers);

    ($roadblock_rc, @dropped_followers) = do_roadblock("endpoint-cleanup-end", $default_rb_timeout, $messages_ref, @active_followers);
    remove_dropped_followers(\@active_followers, \@dropped_followers);
    ####################################################################
}

sub organize_run_data() {
    debug_log("Moving per-client/server/tool data into common iterations and tool-data directories\n");
    # Organize the data from the clients/servers into a common directory structure, organized by
    # iteration, then by sample, then finally by client/server.  This is needed to have
    # the benchmark's postprocessing script work.
    #
    # Tool data is not organized by iteration/sample because it is collected continuously.
    my $tmp_data_dir = $run_dir . "/tmp-data-dir";
    {
        mkdir($tmp_data_dir);
        my $pushd_dir = pushd($tmp_data_dir);
        foreach my $archive (dir_entries($engine_archives_dir,
                                        qr/^(\w+)-(\d+)-data\.tgz$/)) {
            $archive =~ /^(\w+)-(\d+)-data\.tgz$/ or next;
            my $archive_full_path = $engine_archives_dir . "/" . $archive;
            my $cs_type = $1;
            my $cs_id = $2;
            my $tar_cmd = "tar zmxf " . $archive_full_path;
            ($tar_cmd, my $tar_output, my $tar_cmd_rc) = run_cmd($tar_cmd);
            if ($1 =~ /^(client|server)$/) {
                for (my $i = 1; $i <= scalar @{ $run{'iterations'} }; $i++) {
                    my $iter_dir = "iteration-" . $i;
                    if (-d $iter_dir) {
                        opendir(DH, $iter_dir);
                        my @entries =  readdir(DH);
                        foreach my $samp_dir (grep(/^sample/, @entries)) {
                            my $iter_sampl_subpath = $iter_dir . "/" . $samp_dir;
                            my $cs_dest_sampl_path = $run_dir . "/iterations/" . $iter_sampl_subpath .
                                        "/" . $cs_type . "/" . $cs_id;
                            make_path($cs_dest_sampl_path);
                            if (-e $iter_sampl_subpath) {
                                my $iter_sampl_dir = pushd($iter_sampl_subpath);
                                my $mv_cmd = "/bin/mv * " . $cs_dest_sampl_path;
                                ($mv_cmd, my $mv_output, my $mv_cmd_rc) = run_cmd($mv_cmd);
                            }
                        }
                    }
                }
            }
            if (-e "tool-data" and scalar dir_entries("tool-data", qr/\w+/) > 0) {
                my $tool_dir = pushd("tool-data");
                my $cs_tool_dest_path = $run_dir . "/tool-data/" . $cs_type . "/" . $cs_id;
                make_path($cs_tool_dest_path);
                my $mv_cmd = "/bin/mv * " . $cs_tool_dest_path;
                ($mv_cmd, my $mv_output, my $mv_cmd_rc) = run_cmd($mv_cmd);
            }
            if (scalar dir_entries("sysinfo", qr/\w+/) > 0) {
                my $sysinfo_dir = pushd("sysinfo");
                my $cs_sysinfo_dest_path = $run_dir . "/sysinfo/" . $cs_type . "/" . $cs_id;
                make_path($cs_sysinfo_dest_path);
                my $mv_cmd = "/bin/mv * " . $cs_sysinfo_dest_path;
                ($mv_cmd, my $mv_output, my $mv_cmd_rc) = run_cmd($mv_cmd);
            }
            # Must be cleaned up in every loop iteraiton
            system("/bin/rm -rf " . $tmp_data_dir . "/*");
            if ($toolbox::logging::debug == 0) {
                system("/bin/rm -rf " .  $archive_full_path);
            }
        }
    }
    rmdir($tmp_data_dir);
}

sub evaluate_test_roadblock {
    my $roadblock_name = shift;
    my $roadblock_rc = shift;
    my $sample_info = shift;
    my $active_followers = shift;
    my $dropped_followers = shift;
    my $abort = shift;
    my $quit = shift;

    if ($roadblock_rc != 0) {
        # something bad happened...
        if ($roadblock_rc == $roadblock_exit_timeout) {
            printf "[ERROR] roadblock '%s' timed out, attempting to exit and cleanly finish the run\n", $roadblock_name;

            remove_dropped_followers($active_followers, $dropped_followers);

            $quit = 1;
        } elsif ($roadblock_rc == $roadblock_exit_abort) {
            if ($abort == 0) {
                printf "[WARNING] roadblock '%s' received an abort, stopping sample\n", $roadblock_name;
                $$sample_info->{'attempt-fail'} = 1;

                $$sample_info->{'failures'}++;
                printf "sample failures is now: %d\n", $$sample_info->{'failures'};

                if ($$sample_info->{'failures'} >= $run{'max-sample-failures'}) {
                    $$sample_info->{'complete'} = 1;
                    printf "[ERROR] A maximum of %d failures for iteration %d has been reached\n",
                        $$sample_info->{'failures'},
                        $$sample_info->{'iteration-id'};
                }

                $abort = 1;
            }
        } else {
            printf "[ERROR] roadblock '%s' has reached an unknown state with RC=%d\n", $roadblock_name, $roadblock_rc;

            $abort = 1;
            $quit = 1;
        }
    }

    return ($abort, $quit);
}

sub roadblock_exit_on_error {
    my $roadblock_rc = shift;

    if ($roadblock_rc != 0) {
        printf "roadblock_exit_on_error()\n";
        exit $roadblock_rc;
    }
}

sub remove_dropped_followers {
    my $active_followers = shift;
    my $dropped_followers = shift;

    return remove_followers($active_followers, $dropped_followers, 1);
}

sub remove_engine_followers {
    my $active_followers = shift;
    my $dropped_followers = shift;

    return remove_followers($active_followers, $dropped_followers, 0);
}

sub remove_followers {
    my $active_followers = shift;
    my $dropped_followers = shift;
    my $drop_msg = shift;

    my %followers;

    for (my $i=0; $i<@{$active_followers}; $i++) {
        $followers{$$active_followers[$i]} = 0;
    }
    for (my $i=0; $i<@{$dropped_followers}; $i++) {
        if (exists $followers{$$dropped_followers[$i]}) {
            if ($drop_msg) {
                printf "Dropping follower '%s' in an attempt to gracefully continue\n", $$dropped_followers[$i];
            }
            delete $followers{$$dropped_followers[$i]};
        }
    }
    @{$active_followers} = ();
    foreach my $key (keys %followers) {
        push @{$active_followers}, $key;
    }

    return 0;
}

process_cmdline();
load_bench_params();
validate_controller_env();
make_run_dirs();
load_settings_info();
save_config_info();
validate_endpoints();
load_tool_params();
load_utility_params();
if ($run{'reg-auth'} eq "") {
    printf "Disabling registry authorization due to empty 'reg-auth' variable\n";
    $skip_registry_auth = 1;
}
$cs_conf_file = $config_dir . "/cs-conf.json";
%cs_conf = (
                'workshop' => {
                    'schema' => {
                        'version' => '2020.04.30'
                    }
                },
                'config' => {
                    'entrypoint' => [ "/bin/sh", "-c", "/usr/local/bin/bootstrap" ],
                    'labels' => [ 'quay.expires-after=2w' ],
                    'envs' => [ 'TOOLBOX_HOME=/opt/toolbox' ]
                }
            );
if (put_json_file($cs_conf_file, \%cs_conf) > 0) {
    printf "put_json_file(): %s: failed\n", $cs_conf_file;
    exit 1;
}
build_test_order();
prepare_bench_tool_engines();
print "Preparing userenvs:\n";
debug_log (sprintf "image_ids (before):\n" . Dumper \%image_ids);
foreach my $bench (keys %bench_configs) {
    printf "Working on %s benchmark\n", $bench;
    foreach my $userenv (keys %{ $image_ids{$bench} }) {
        printf "Working on %s userenv\n", $userenv;
        my $image = source_container_image($userenv, $bench, $arch);
        if (!defined $image) {
            die "Could not get valid image [" . $image_ids{$bench}{$userenv}{'image'} . "] for container image build for userenv [" . $userenv . "] and benchmark [" . $bench . "]\n";
        }
        printf "Image is: %s\n", $image;
        $image_ids{$bench}{$userenv}{'image'} = $image;
    }
}
debug_log(sprintf "image_ids(after):\n" . Dumper \%image_ids);

add_ssh_keys();
deploy_endpoints();
process_roadblocks();
organize_run_data();
# TODO: remove temporary ssh keys from local authorized_keys file
my $run_file = $run_dir . "/rickshaw-run.json";
$run{'rickshaw-run'}{'schema'}{'version'} = "2020.03.18";
if (put_json_file($run_file, \%run, $run_schema_file) > 0) {
    printf "main(): put_json_file() failed for %s\n", $run_file
}
if (defined $abort_test_id) {
    printf "WARNING: test %s was aborted. and all subsequent tests were not attempted.  " .
           "Run is incomplete\n", $abort_test_id;
    exit 1;
}
