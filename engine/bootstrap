#!/usr/local/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
#
# The following is the minimum amount of code to copy over the client-server-script and no more.
exec 2>&1

echo "BASH_VERSION=${BASH_VERSION}"

# Some container images need this
test -e /etc/profile && . /etc/profile

# "/usr/local/bin" is not always in the $PATH but it needs to be
PATH="/usr/local/bin:$PATH"

function exit_error() {
    local message=$1; shift
    local code=$1; shift
    echo -e "[ERROR]bootstrap: $message\n"
    echo "Exiting"
    if [ -z "$code" ]; then
        exit 1
    else
        exit $code
    fi
}
export -f exit_error

function scp_from_controller() {
    local ssh_id_file=$1; shift
    local src=$1; shift
    local dest=$1; shift
    if [ -z "$ssh_id_file" ]; then
        exit_error "scp_from_controller(): ssh_id_file not defined"
    fi
    if [ -z "$src" ]; then
        exit_error "scp_from_controller(): src not defined"
    fi
    if [ -z "$dest" ]; then
        exit_error "scp_from_controller(): dest not defined"
    fi
    local scp_attempts=1
    local scp_rc=1
    local max_attempts=10
    scp_cmd="scp -o StrictHostKeyChecking=no"
    scp_cmd+=" -o BatchMode=yes"
    scp_cmd+=" -v"
    scp_cmd+=" -o ConnectionAttempts=10"
    scp_cmd+=" -i $ssh_id_file"
    scp_cmd+=" -r $rickshaw_host:$src $dest"
    while [ $scp_rc -gt 0 -a $scp_attempts -lt $max_attempts ]; do
        echo "Trying to scp $rickshaw_host:$src $dest"
        scp_output=`$scp_cmd 2>&1`
        scp_rc=$?
        if [ $scp_rc -gt 0 ]; then
            echo "scp failed, trying again"
            echo "scp exit code: $scp_rc"
            echo "scp command: $scp_cmd"
            echo "scp output:"
            echo "$scp_output"
            sleep $scp_attempts
        fi
        let scp_attempts=$scp_attempts+1
    done
    if [ $scp_attempts -ge $max_attempts ]; then
        exit_error "Could not copy $src from $rickshaw_host"
    fi
}
export -f scp_from_controller

echo "bootstrap env:"
env
echo "bootstrap params:"
echo "$@"
echo
longopts="rickshaw-host:,base-run-dir:,endpoint-run-dir:,cs-label:,roadblock-server:"
longopts+=",roadblock-passwd:,roadblock-id:,disable-tools:,osruntime:,endpoint:,max-sample-failures:"
longopts+=",cpu-partitioning:,max-rb-attempts:,client-server-script-start-timeout:"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
eval set -- "$opts";
while true; do
    case "$1" in
        --cpu-partitioning)
            shift;
            export cpu_partitioning="$1"
            shift;
            ;;
        --osruntime)
            shift;
            export osruntime="$1"
            shift;
            ;;
        --endpoint)
            shift;
            export endpoint="$1"
            shift;
            ;;
        --rickshaw-host)
            shift;
            export rickshaw_host="$1"
            shift;
            ;;
        --base-run-dir)
            shift;
            export base_run_dir=$1
            shift;
            ;;
        --cs-label)
            shift;
            export cs_label="$1"
            shift;
            ;;
        --endpoint-run-dir)
            shift;
            export endpoint_run_dir="$1"
            shift;
            ;;
        --roadblock-server)
            shift;
            export roadblock_server="$1"
            shift;
            ;;
        --roadblock-passwd)
            shift;
            export roadblock_passwd="$1"
            shift;
            ;;
        --roadblock-id)
            shift;
            export roadblock_id="$1"
            shift;
            ;;
        --disable-tools)
            shift;
            export disable_tools="$1"
            shift;
            ;;
        --max-sample-failures)
            shift;
            export max_sample_failures="$1"
            shift;
            ;;
        --max-rb-attempts)
            shift;
            export max_rb_attempts="$1"
            shift;
            ;;
        --client-server-script-start-timeout)
            shift;
            export client_server_script_start_timeout="$1"
            echo "setting client_server_script_start_timeout to $client_server_script_start_timeout"
            shift;
            ;;
        --)
            shift;
            break;
           ;;
        *)
            exit_error "Unexpected argument [$1]"
            shift;
            break;
            ;;
    esac
done

if [ -z "$max_rb_attempts" ]; then
    max_rb_attempts=1
    echo "[WARNING] --max-rb-attempts was not used, so setting to default of $max_rb_attempts"
fi

if [ -z "$max_sample_failures" ]; then
    max_sample_failures=3
    echo "[WARNING] --max-sample-failures was not used, so setting to default of $max_sample_failures"
fi

export ssh_id_file="/tmp/rickshaw_id.rsa"
if [ ! -z "$ssh_id" ]; then
    echo "Creating ${ssh_id_file} from \$ssh_id environment variable"
    echo -e "$ssh_id" > $ssh_id_file
    cat $ssh_id_file
    chmod 600 $ssh_id_file
    echo
fi
if [ ! -e $ssh_id_file ]; then
    exit_error "ssh key $ssh_id_file was not found"
fi
export config_dir="$base_run_dir/config"
export client_server_config_dir="$config_dir/client-server"

if [ -z "${TOOLBOX_HOME}" ]; then
    export TOOLBOX_HOME="/opt/toolbox"
fi

echo "cpu-partitioning:"
if [ "${cpu_partitioning}" == "1" ]; then
    echo "Enabled"

    environment="process"
    if [ "${endpoint}" == "k8s" ]; then
	environment="container"
    fi
    cpu_data=$(/usr/local/bin/discover-cpu-partitioning.py --environment=${environment})

    # log the data returned
    echo -e "${cpu_data}"

    housekeeping_cpus=$(echo -e "${cpu_data}" | grep housekeeping | awk '{ print $3 }')
    export HK_CPUS=${housekeeping_cpus}

    isolated_cpus=$(echo -e "${cpu_data}" | grep isolated | awk '{ print $3 }')
    export WORKLOAD_CPUS=${isolated_cpus}

    # pin myself to the housekeeping cpus so that I and my children
    # are contained there
    taskset --cpu-list --pid ${HK_CPUS} $$
else
    echo "Disabled"
fi
echo

export json_settings_file="/tmp/rickshaw-settings.json.xz"

scp_from_controller "$ssh_id_file" "$config_dir/rickshaw-settings.json.xz" /tmp
if [ ! -e ${json_settings_file} ]; then
    exit_error "Could not find rickshaw-settings.json.xz"
fi

scp_from_controller "$ssh_id_file" "$client_server_config_dir/client-server-script" /usr/local/bin/
scp_from_controller "$ssh_id_file" "$client_server_config_dir/client-server-script-library" /usr/local/bin/
if [ -e /usr/local/bin/client-server-script -a -e /usr/local/bin/client-server-script-library ]; then
    echo "Execing client-server-script:"
    exec /usr/local/bin/client-server-script
else
    exit_error "Could not find client-server-script or client-server-script-library"
fi
